import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", web_app=WebAppInfo(url=f"{WEB_APP_URL}/calculators"))],
        [InlineKeyboardButton("üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", web_app=WebAppInfo(url=f"{WEB_APP_URL}/ta"))],
        [InlineKeyboardButton("üåä –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑", web_app=WebAppInfo(url=f"{WEB_APP_URL}/waves"))],
        [InlineKeyboardButton("üé≤ –°–∏–º—É–ª—è—Ç–æ—Ä", web_app=WebAppInfo(url=f"{WEB_APP_URL}/simulator"))],
        [InlineKeyboardButton("üß† –¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞", web_app=WebAppInfo(url=f"{WEB_APP_URL}/markov"))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RMM Trading Tools!**

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
‚Ä¢ üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –≤—Ö–æ–¥–∞ –∏ –æ–±—ä–µ–º–∞
‚Ä¢ üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üåä –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üé≤ –°–∏–º—É–ª—è—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ üß† –¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def calculators(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ö–æ–¥–∞", web_app=WebAppInfo(url=f"{WEB_APP_URL}/calculators"))],
        [InlineKeyboardButton("üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–∞", web_app=WebAppInfo(url=f"{WEB_APP_URL}/calculators"))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def simulator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–∏–º—É–ª—è—Ç–æ—Ä –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ", web_app=WebAppInfo(url=f"{WEB_APP_URL}/simulator"))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üé≤ **–°–∏–º—É–ª—è—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π**\n\n–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø–æ–º–æ—â—å—é —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def markov(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üß† –¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞", web_app=WebAppInfo(url=f"{WEB_APP_URL}/markov"))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üß† **–¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞**\n\n–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
ü§ñ **RMM Trading Tools - –°–ø—Ä–∞–≤–∫–∞**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/calculators` - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
‚Ä¢ `/simulator` - –°–∏–º—É–ª—è—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ `/markov` - –¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
‚Ä¢ üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –≤—Ö–æ–¥–∞ –∏ –æ–±—ä–µ–º–∞
‚Ä¢ üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üåä –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üé≤ –°–∏–º—É–ª—è—Ç–æ—Ä –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @mommycodes
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == "calculators":
        await calculators(update, context)
    elif query.data == "simulator":
        await simulator(update, context)
    elif query.data == "markov":
        await markov(update, context)

def main():
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    if not WEB_APP_URL:
        print("‚ùå WEB_APP_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("calculators", calculators))
    application.add_handler(CommandHandler("simulator", simulator))
    application.add_handler(CommandHandler("markov", markov))
    application.add_handler(CommandHandler("help", help_command))
    
    application.add_handler(CallbackQueryHandler(button_callback))
    
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()