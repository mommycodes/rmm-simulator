import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px

def plot_simulations(data, initial_balance):
    n = min(100, len(data))
    st.markdown(f"#### üìà {n} —Å–∏–º—É–ª—è—Ü–∏–π –∫–∞–ø–∏—Ç–∞–ª–∞")
    st.caption("""
    –ö–∞–∂–¥–∞—è –ª–∏–Ω–∏—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.  
    **–û—Å—å X** ‚Äî –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥).  
    **–û—Å—å Y** ‚Äî —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.  
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤–µ–¥—ë—Ç —Å–µ–±—è –∫–∞–ø–∏—Ç–∞–ª –ø–æ –º–µ—Ä–µ —Å–¥–µ–ª–æ–∫. –ù—É–∂–µ–Ω –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.  
    üî¥ **–ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è** ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª (—É—Ä–æ–≤–µ–Ω—å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞).  
    üîµ **–°–∏–Ω—è—è –ª–∏–Ω–∏—è** ‚Äî –º–µ–¥–∏–∞–Ω–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ –≤—Å–µ–º —Å–∏–º—É–ª—è—Ü–∏—è–º.
    """)

    st.info("""
    üëâ **–ö–∞–∫ —á–∏—Ç–∞—Ç—å:**  
    –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ª–∏–Ω–∏–π –±—ã—Å—Ç—Ä–æ –ø–∞–¥–∞–µ—Ç –≤–Ω–∏–∑ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è **—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è**.  
    –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä–∞—Å—Ç—ë—Ç –∏–ª–∏ –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã—à–µ —Å—Ç–∞—Ä—Ç–∞ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è **—É—Å—Ç–æ–π—á–∏–≤–∞**.
    """)

    num_lines = st.number_input("üìä –°–∫–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å (–¥–æ 100)", min_value=1, max_value=min(100, len(data)), value=min(100, len(data)), step=1)

    median_balance = np.median(data[:, -1])

    fig = go.Figure()

    for i in range(num_lines):
        fig.add_trace(go.Scatter(
            y=data[i],
            mode='lines',
            line=dict(width=1),
            name=None,
            opacity=0.4,
            hoverinfo='skip',
            showlegend=False
        ))

    # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ª–∏–Ω–∏—è
    fig.add_trace(go.Scatter(
        x=[0, len(data[0]) - 1],
        y=[initial_balance, initial_balance],
        mode="lines",
        line=dict(color="red", dash="dash"),
        name="–°—Ç–∞—Ä—Ç"
    ))
    # –ú–µ–¥–∏–∞–Ω–∞
    fig.add_trace(go.Scatter(
        x=[0, len(data[0]) - 1],
        y=[median_balance, median_balance],
        mode="lines",
        line=dict(color="blue", dash="dot"),
        name="–ú–µ–¥–∏–∞–Ω–∞"
    ))

    fig.update_layout(
        title="–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∫–∞–ø–∏—Ç–∞–ª–∞",
        xaxis_title="–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏",
        yaxis_title="–ë–∞–ª–∞–Ω—Å",
        height=500,
        showlegend=False
    )

    st.plotly_chart(fig, use_container_width=True)

def plot_best_worst(data, balances):
    n = len(balances)
    half = min(10, n // 2)
    st.markdown(f"#### üü¢ {half} –ª—É—á—à–∏—Ö | üîª {half} —Ö—É–¥—à–∏—Ö")

    st.caption("""
    **–ó–µ–ª—ë–Ω—ã–µ –ª–∏–Ω–∏–∏** ‚Äî —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∏—Ç–æ–≥–æ–º.  
    **–ö—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏** ‚Äî —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∏—Ç–æ–≥–æ–º.  
    **–û—Å—å X** ‚Äî —à–∞–≥ (–Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏),  
    **–û—Å—å Y** ‚Äî —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª.
    """)

    st.info("""
    üëâ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**  
    –°—Ä–∞–≤–Ω–∏ –ª—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Å–ª—É—á–∞–∏.  
    –ï—Å–ª–∏ –¥–∞–∂–µ —Ö—É–¥—à–∏–µ –Ω–µ –æ–±–Ω—É–ª—è—é—Ç –±–∞–ª–∞–Ω—Å ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞–¥—ë–∂–Ω–∞—è.  
    –ï—Å–ª–∏ —Ö—É–¥—à–∏–µ –ø–∞–¥–∞—é—Ç –≤ 0 ‚Äî –∑–∞–¥—É–º–∞–π—Å—è –æ —Ä–∏—Å–∫–∞—Ö.
    """)

    spread = np.max(balances) - np.min(balances)
    st.caption(f"üìä –†–∞–∑–±—Ä–æ—Å –º–µ–∂–¥—É –ª—É—á—à–µ–π –∏ —Ö—É–¥—à–µ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π: **{spread:,.2f}$**")

    fig = go.Figure()

    best = balances.argsort()[-half:]
    worst = balances.argsort()[:half]

    for idx, i in enumerate(reversed(worst), 1):
        fig.add_trace(go.Scatter(
            y=data[i],
            mode='lines',
            name=f"‚ùå #{idx} —Ö—É–¥—à–∏–π ‚Äî {balances[i]:,.2f}",
            line=dict(color='red'),
            opacity=0.6
        ))
        fig.add_trace(go.Scatter(
                x=[0],
                y=[data[i][0]],
                mode="markers",
                marker=dict(color="black", size=6),
                showlegend=False,
                hovertext=f"–°—Ç–∞—Ä—Ç: {data[i][0]:.2f}",
                hoverinfo="text"
            ))
        fig.add_trace(go.Scatter(
                x=[len(data[i]) - 1],
                y=[data[i][-1]],
                mode="markers",
                marker=dict(color="gold", size=6),
                showlegend=False,
                hovertext=f"–§–∏–Ω–∏—à: {data[i][-1]:.2f}",
                hoverinfo="text"
            ))
    for idx, i in enumerate(reversed(best), 1):
        fig.add_trace(go.Scatter(
            y=data[i],
            mode='lines',
            name=f"‚úÖ #{idx} –ª—É—á—à–∏–π ‚Äî {balances[i]:,.2f}",
            line=dict(color='green'),
            opacity=0.6
        ))
        fig.add_trace(go.Scatter(
                x=[0],
                y=[data[i][0]],
                mode="markers",
                marker=dict(color="black", size=6),
                showlegend=False,
                hovertext=f"–°—Ç–∞—Ä—Ç: {data[i][0]:.2f}",
                hoverinfo="text"
            ))
        fig.add_trace(go.Scatter(
                x=[len(data[i]) - 1],
                y=[data[i][-1]],
                mode="markers",
                marker=dict(color="gold", size=6),
                showlegend=False,
                hovertext=f"–§–∏–Ω–∏—à: {data[i][-1]:.2f}",
                hoverinfo="text"
            ))

    fig.update_layout(
        title="–õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∫–∞–ø–∏—Ç–∞–ª–∞",
        xaxis_title="–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏",
        yaxis_title="–ë–∞–ª–∞–Ω—Å",
        height=500
    )

    st.plotly_chart(fig, use_container_width=True)


def plot_distribution(balances, initial_balance):
    st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤")
    st.caption("""
    **–û—Å—å X** ‚Äî –∏—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏.  
    **–û—Å—å Y** ‚Äî —Å–∫–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏–π –¥–∞–ª–∏ —Ç–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.  
    –≠—Ç–æ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è —á–∞—Å—Ç–æ—Ç—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤.
    """)

    st.info("""
    üëâ **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**  
    –£–∑–∫–∏–π –ø–∏–∫ = —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–∞—ë—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.  
    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–æ –≤–ø—Ä–∞–≤–æ = –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏–±—ã–ª–∏.  
    –ú–Ω–æ–≥–æ —Å–ª–µ–≤–∞ = —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—è—Ç—å –∫–∞–ø–∏—Ç–∞–ª.
    """)

    profitable = np.sum(balances > initial_balance)
    unprofitable = len(balances) - profitable
    volatility = np.std(balances)

    st.caption(f"üü¢ –í –ø–ª—é—Å–µ: **{profitable}** | üî¥ –í –º–∏–Ω—É—Å–µ: **{unprofitable}** | üìâ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: **{volatility:.2f}$**")

    fig = px.histogram(
        x=balances,
        nbins=50,
        labels={"x": "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å"},
        title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏—Ç–æ–≥–æ–≤ –ø–æ —Å–∏–º—É–ª—è—Ü–∏—è–º",
        opacity=0.75
    )

    fig.add_vline(x=initial_balance, line_dash="dash", line_color="red", annotation_text="–°—Ç–∞—Ä—Ç", annotation_position="top right")

    fig.update_layout(
        title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏—Ç–æ–≥–æ–≤ ({len(balances)} —Å–∏–º—É–ª—è—Ü–∏–π)",
        xaxis_title="–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π",
        bargap=0.05,
        height=500
    )

    st.plotly_chart(fig, use_container_width=True)


def plot_liquidation_distribution(liq_steps, num_trades):
    st.markdown("#### üíÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –ø–æ —Å–¥–µ–ª–∫–∞–º")
    st.caption("""
    **–û—Å—å X** ‚Äî –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è.  
    **–û—Å—å Y** ‚Äî —Å–∫–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏–π –±—ã–ª–∏ –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ.
    """)

    st.info("""
    üëâ **–ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π:**  
    –ü–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–µ ‚Äî –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏.  
    –ü–ª–∞–≤–Ω—ã–π —Å–ø–∞–¥ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ —Å–ª—É—á–∞–π–Ω—ã–º –Ω–µ—É–¥–∞—á–∞–º.
    """)

    if liq_steps:
        avg_liq = np.mean(liq_steps)
        st.caption(f"üìç –°—Ä–µ–¥–Ω–∏–π —à–∞–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: **{avg_liq:.1f}**")
    else:
        st.caption("‚úÖ –ù–∏ –æ–¥–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞!")

    survived_pct = 100 * (1 - len(liq_steps) / len(data))
    st.caption(f"üß± –°–∏–º—É–ª—è—Ü–∏–π –±–µ–∑ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: **{survived_pct:.1f}%**")

    fig = px.histogram(
        x=liq_steps,
        nbins=num_trades,
        labels={"x": "–®–∞–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"},
        title="–®–∞–≥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏",
        opacity=0.75
    )

    fig.update_layout(
        title=f"–®–∞–≥–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π ({len(liq_steps)} –∏–∑ {num_trades} —Å–¥–µ–ª–æ–∫)",
        xaxis_title="–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏",
        yaxis_title="–ö–æ–ª-–≤–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π",
        height=500
    )

    st.plotly_chart(fig, use_container_width=True)


def plot_probability_heatmap(data, initial_balance):
    st.markdown("#### üß† –ö–∞—Ä—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (–Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)")
    st.caption("""
    **–û—Å—å X** ‚Äî –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ (—à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏).  
    **–û—Å—å Y** ‚Äî –¥–æ–ª—è —Å–∏–º—É–ª—è—Ü–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–∞–ª–∞–Ω—Å –æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∏–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ.
    """)

    st.info("""
    üëâ **–ö–∞–∫ —á–∏—Ç–∞—Ç—å:**  
    –†–æ—Å—Ç –∫—Ä–∏–≤–æ–π ‚Äî –±–æ–ª—å—à–µ –ø—Ä–æ—Å–∞–¥–æ–∫ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ.  
    –ü–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –ø–ª–∞—Ç–æ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è.
    """)

    heat = [np.sum(data[:, j] < initial_balance) / len(data) for j in range(1, data.shape[1])]

    max_risk_step = np.argmax(heat) + 1
    max_risk_value = np.max(heat)
    st.caption(f"üö® –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–∞–¥–æ–∫ –Ω–∞ —à–∞–≥–µ **{max_risk_step}** ‚Äî –≤ –ø—Ä–æ—Å–∞–¥–∫–µ –±—ã–ª–∏ **{max_risk_value:.1%}** —Å–∏–º—É–ª—è—Ü–∏–π.")

    heat = [np.sum(data[:, j] < initial_balance) / len(data) for j in range(1, data.shape[1])]
    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=list(range(1, len(heat)+1)),
        y=heat,
        mode='lines',
        fill='tozeroy',
        name="–ü—Ä–æ—Å–∞–¥–∫–∏",
        line=dict(color="purple")
    ))

    fig.update_layout(
         title=f"–î–æ–ª—è –ø—Ä–æ—Å–µ–≤—à–∏—Ö —Å–∏–º—É–ª—è—Ü–∏–π ({len(data)} —à—Ç—É–∫ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ)",
        xaxis_title="–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏",
        yaxis_title="–î–æ–ª—è –Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞",
        yaxis=dict(range=[0, 1]),
        height=500
    )

    st.plotly_chart(fig, use_container_width=True)

