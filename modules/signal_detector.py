import streamlit as st
import pandas as pd


def render_signal_detector() -> None:
    """–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª.

    –ë–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ SMA, RSI –∑–æ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü RSI),
    –ø—Ä–æ–±–æ–∏ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤.
    """

    st.markdown("## üîç –î–µ—Ç–µ–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤")

    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å —Ü–µ–Ω–∞–º–∏ (Date, Open, High, Low, Close)", type=["csv"])
    if uploaded is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
        return

    try:
        df = pd.read_csv(uploaded)
    except Exception as exc:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {exc}")
        return

    required = {"Close"}
    if not required.issubset(set(df.columns)):
        st.error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü Close")
        return

    col1, col2, col3 = st.columns(3)
    with col1:
        sma_fast = st.number_input("SMA fast", min_value=2, max_value=200, value=9)
    with col2:
        sma_slow = st.number_input("SMA slow", min_value=3, max_value=400, value=21)
    with col3:
        use_breakouts = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–æ–∏ High/Low", value=True)

    df = df.copy()
    df["SMA_fast"] = df["Close"].rolling(int(sma_fast)).mean()
    df["SMA_slow"] = df["Close"].rolling(int(sma_slow)).mean()

    signals: list[dict] = []

    # –°–∏–≥–Ω–∞–ª—ã –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é SMA
    for i in range(1, len(df)):
        prev_fast, prev_slow = df.loc[i - 1, ["SMA_fast", "SMA_slow"]]
        fast, slow = df.loc[i, ["SMA_fast", "SMA_slow"]]
        if pd.notna(prev_fast) and pd.notna(prev_slow) and pd.notna(fast) and pd.notna(slow):
            if prev_fast <= prev_slow and fast > slow:
                signals.append({"–ò–Ω–¥–µ–∫—Å": i, "–°–∏–≥–Ω–∞–ª": "üü¢ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö (SMA)"})
            if prev_fast >= prev_slow and fast < slow:
                signals.append({"–ò–Ω–¥–µ–∫—Å": i, "–°–∏–≥–Ω–∞–ª": "üî¥ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–Ω–∏–∑ (SMA)"})

    # –ü—Ä–æ–±–æ–∏ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
    if use_breakouts and {"High", "Low"}.issubset(set(df.columns)):
        window = 20
        for i in range(window, len(df)):
            if df.loc[i, "Close"] > df.loc[i - window:i - 1, "High"].max():
                signals.append({"–ò–Ω–¥–µ–∫—Å": i, "–°–∏–≥–Ω–∞–ª": "üìà –ü—Ä–æ–±–æ–π –º–∞–∫—Å–∏–º—É–º–∞"})
            if df.loc[i, "Close"] < df.loc[i - window:i - 1, "Low"].min():
                signals.append({"–ò–Ω–¥–µ–∫—Å": i, "–°–∏–≥–Ω–∞–ª": "üìâ –ü—Ä–æ–±–æ–π –º–∏–Ω–∏–º—É–º–∞"})

    if signals:
        st.success(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        st.dataframe(pd.DataFrame(signals), use_container_width=True)
    else:
        st.info("–°–∏–≥–Ω–∞–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ —Ç–µ–∫—É—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")


