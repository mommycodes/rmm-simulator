"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–° —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ
"""
import streamlit as st
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from .markov_chain import CryptoMarkovChain
from .data_fetcher import CryptoDataFetcher

class SimplifiedMarkovAnalysis:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.markov_chain = CryptoMarkovChain()
        self.data_fetcher = CryptoDataFetcher()
        self.current_price = None
        self.price_change_24h = None
        
    def render_simplified_interface(self):
        """–ì–ª–∞–≤–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        st.markdown("## üß† –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        st.info("""
        **ü§î –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?**
        
        –ü—É—Å—Ç—å —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - —ç—Ç–æ –º–∞—à–∏–Ω–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏:
        - üìà **–†–æ—Å—Ç** (—Ü–µ–Ω–∞ –∏–¥–µ—Ç –≤–≤–µ—Ä—Ö)
        - üìâ **–ü–∞–¥–µ–Ω–∏–µ** (—Ü–µ–Ω–∞ –∏–¥–µ—Ç –≤–Ω–∏–∑) 
        - ‚û°Ô∏è **–ë–æ–∫–æ–≤–∏–∫** (—Ü–µ–Ω–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ)
        
        –°–∏—Å—Ç–µ–º–∞ –∏–∑—É—á–∞–µ—Ç, –∫–∞–∫ —á–∞—Å—Ç–æ —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –¥—Ä—É–≥–æ–µ,
        –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ.
        """)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if "analysis_data" in st.session_state:
            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            self._display_saved_analysis()
            st.markdown("---")
        
        # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        st.markdown("### ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
        
        crypto_options = self.data_fetcher.get_available_symbols()
        selected_crypto = st.selectbox(
            "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:",
            list(crypto_options.keys()),
            index=0
        )
        symbol = crypto_options[selected_crypto]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        self._show_current_price(symbol)
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫", use_container_width=True):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫..."):
                    self._run_analysis(symbol)
                    st.rerun()
        
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
                # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                keys_to_clear = [
                    "analysis_data", "analysis_states", "analysis_unique_states", 
                    "analysis_symbol", "predictions", "selected_state", "symbol"
                ]
                for key in keys_to_clear:
                    if key in st.session_state:
                        del st.session_state[key]
                st.rerun()
    
    def _show_current_price(self, symbol: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.data_fetcher.fetch_data(symbol, "5d")
            if data is not None and len(data) > 0:
                current_price = data['Close'].iloc[-1]
                prev_price = data['Close'].iloc[-2] if len(data) > 1 else current_price
                price_change = ((current_price - prev_price) / prev_price) * 100
                
                self.current_price = current_price
                self.price_change_24h = price_change
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${current_price:,.2f}")
                with col2:
                    st.metric("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å", f"{price_change:+.2f}%")
                with col3:
                    if price_change > 0:
                        st.metric("üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üü¢ –†–æ—Å—Ç")
                    elif price_change < 0:
                        st.metric("üìâ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üî¥ –ü–∞–¥–µ–Ω–∏–µ")
                    else:
                        st.metric("‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "‚ö™ –ë–æ–∫–æ–≤–∏–∫")
                
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã! –ú–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    def _run_analysis(self, symbol: str):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self.data_fetcher.fetch_data(symbol, "1y")
        
        if data is None or data.empty:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        states = self.markov_chain.define_states(data)
        unique_states = list(set(states.values()))
        
        # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        transition_matrix = self.markov_chain.build_transition_matrix(data)
        
        st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(unique_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä—ã–Ω–∫–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
        st.session_state.analysis_data = data
        st.session_state.analysis_states = states
        st.session_state.analysis_unique_states = unique_states
        st.session_state.analysis_symbol = symbol
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._show_market_analysis(data, states, unique_states)
        self._show_trading_predictions(symbol, unique_states)
        self._show_wave_analysis(data)
    
    def _show_market_analysis(self, data: pd.DataFrame, states: Dict, unique_states: List[str]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
        
        st.markdown("---")
        st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if len(data) > 0:
            current_price = data['Close'].iloc[-1]
            prev_price = data['Close'].iloc[-2] if len(data) > 1 else current_price
            price_change = ((current_price - prev_price) / prev_price) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = self._get_current_state(data.iloc[-1])
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üéØ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞")
                st.write(f"**–¶–µ–Ω–∞:** ${current_price:,.2f}")
                st.write(f"**–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {price_change:+.2f}%")
                st.write(f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {self._explain_state(current_state)}")
            
            with col2:
                st.markdown("#### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥")
                total_change = ((data['Close'].iloc[-1] - data['Close'].iloc[0]) / data['Close'].iloc[0]) * 100
                volatility = data['Close'].pct_change().std() * 100
                
                st.write(f"**–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:** {total_change:+.1f}%")
                st.write(f"**–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:** {volatility:.1f}%")
                st.write(f"**–ú–∞–∫—Å–∏–º—É–º:** ${data['High'].max():,.2f}")
                st.write(f"**–ú–∏–Ω–∏–º—É–º:** ${data['Low'].min():,.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self._show_state_frequency(unique_states, states)
    
    def _get_current_state(self, last_row: pd.Series) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        price_change = last_row['Close'] - last_row['Open']
        price_change_pct = (price_change / last_row['Open']) * 100
        
        if price_change_pct > 2:
            return "–†–æ—Å—Ç"
        elif price_change_pct < -2:
            return "–ü–∞–¥–µ–Ω–∏–µ"
        else:
            return "–ë–æ–∫–æ–≤–∏–∫"
    
    def _explain_state(self, state: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
        if state == "–†–æ—Å—Ç":
            return "üü¢ –†—ã–Ω–æ–∫ —Ä–∞—Å—Ç–µ—Ç - –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å–∏–ª—å–Ω–µ–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
        elif state == "–ü–∞–¥–µ–Ω–∏–µ":
            return "üî¥ –†—ã–Ω–æ–∫ –ø–∞–¥–∞–µ—Ç - –ø—Ä–æ–¥–∞–≤—Ü—ã —Å–∏–ª—å–Ω–µ–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
        else:
            return "‚ö™ –†—ã–Ω–æ–∫ –≤ –±–æ–∫–æ–≤–∏–∫–µ - –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∏ –ø—Ä–æ–¥–∞–≤—Ü—ã –≤ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–∏"
    
    def _show_state_frequency(self, unique_states: List[str], states: Dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        st.markdown("#### üìä –ß–∞—Å—Ç–æ—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä—ã–Ω–∫–∞")
        
        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        state_counts = {}
        for state in states.values():
            state_counts[state] = state_counts.get(state, 0) + 1
        
        total = len(states)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–æ—Å—Ç–æ—è–Ω–∏–π
        sorted_states = sorted(state_counts.items(), key=lambda x: x[1], reverse=True)
        
        st.write("**–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:**")
        for i, (state, count) in enumerate(sorted_states[:5]):
            percentage = (count / total) * 100
            st.write(f"{i+1}. {self._explain_state_simple(state)} - {percentage:.1f}% –≤—Ä–µ–º–µ–Ω–∏")
    
    def _explain_state_simple(self, state: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if "T2" in state:
            return "üìà –†–æ—Å—Ç"
        elif "T0" in state:
            return "üìâ –ü–∞–¥–µ–Ω–∏–µ"
        else:
            return "‚û°Ô∏è –ë–æ–∫–æ–≤–∏–∫"
    
    def _show_trading_predictions(self, symbol: str, unique_states: List[str]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
        
        st.markdown("---")
        st.markdown("### üîÆ –¢–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
        st.info("""
        **ü§î –ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã?**
        
        –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å —Ä—ã–Ω–∫–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:
        - **1 —à–∞–≥** = –∑–∞–≤—Ç—Ä–∞ (—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å)
        - **2 —à–∞–≥** = –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
        - **3 —à–∞–≥** = —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        - –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...
        
        **–ü—Ä–æ—Ü–µ–Ω—Ç** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ.
        """)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if "predictions" in st.session_state and "selected_state" in st.session_state:
            st.markdown("#### üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
            self._display_saved_predictions()
            st.markdown("---")
        
        # –í—ã–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        if unique_states:
            selected_state = st.selectbox(
                "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
                unique_states,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"
            )
            
            col1, col2 = st.columns([1, 1])
            with col1:
                if st.button("üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", use_container_width=True):
                    self._generate_detailed_predictions(selected_state, symbol)
                    st.rerun()
            
            with col2:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", use_container_width=True):
                    if "predictions" in st.session_state:
                        del st.session_state.predictions
                    if "selected_state" in st.session_state:
                        del st.session_state.selected_state
                    if "symbol" in st.session_state:
                        del st.session_state.symbol
                    st.rerun()
    
    def _generate_detailed_predictions(self, selected_state: str, symbol: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        predictions = self.markov_chain.predict_next_states(selected_state, 5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = self._get_current_price(symbol)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        trading_signals = self.markov_chain.generate_trading_signals(predictions, current_price)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
        st.session_state.predictions = predictions
        st.session_state.trading_signals = trading_signals
        st.session_state.selected_state = selected_state
        st.session_state.symbol = symbol
        
        st.markdown(f"#### üìä –ü—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {self._explain_state_simple(selected_state)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.markov_chain.display_trading_signals(trading_signals)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        market_summary = self.markov_chain.get_market_summary(trading_signals)
        self._display_market_summary(market_summary)
    
    def _display_saved_predictions(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã"""
        predictions = st.session_state.predictions
        selected_state = st.session_state.selected_state
        symbol = st.session_state.symbol
        
        st.markdown(f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {self._explain_state_simple(selected_state)}")
        st.markdown(f"**–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:** {symbol}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        for i, pred in enumerate(predictions):
            step = pred['step']
            state = pred['state']
            probability = pred['probability']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal = self._get_trading_signal(state)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
            with st.container():
                col1, col2, col3 = st.columns([1, 2, 1])
                
                with col1:
                    st.markdown(f"**–î–µ–Ω—å {step}**")
                
                with col2:
                    st.markdown(f"**{self._explain_state_simple(state)}**")
                    st.markdown(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {probability:.1%}")
                
                with col3:
                    st.markdown(f"**{signal['emoji']} {signal['action']}**")
                
                # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                st.markdown(f"**üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {signal['explanation']}")
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if signal['action'] != "–ù–ï–ô–¢–†–ê–õ–¨–ù–û":
                    self._show_trading_recommendations(step, signal, symbol)
                
                st.markdown("---")
    
    def _display_saved_analysis(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞"""
        data = st.session_state.analysis_data
        states = st.session_state.analysis_states
        unique_states = st.session_state.analysis_unique_states
        symbol = st.session_state.analysis_symbol
        
        st.markdown(f"**–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:** {symbol}")
        st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π:** {len(unique_states)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if len(data) > 0:
            current_price = data['Close'].iloc[-1]
            prev_price = data['Close'].iloc[-2] if len(data) > 1 else current_price
            price_change = ((current_price - prev_price) / prev_price) * 100
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${current_price:,.2f}")
            with col2:
                st.metric("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å", f"{price_change:+.2f}%")
            with col3:
                if price_change > 0:
                    st.metric("üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üü¢ –†–æ—Å—Ç")
                elif price_change < 0:
                    st.metric("üìâ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "üî¥ –ü–∞–¥–µ–Ω–∏–µ")
                else:
                    st.metric("‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "‚ö™ –ë–æ–∫–æ–≤–∏–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_counts = {}
        for state in states.values():
            state_counts[state] = state_counts.get(state, 0) + 1
        
        total = len(states)
        sorted_states = sorted(state_counts.items(), key=lambda x: x[1], reverse=True)
        
        st.markdown("**–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:**")
        for i, (state, count) in enumerate(sorted_states[:3]):
            percentage = (count / total) * 100
            st.write(f"{i+1}. {self._explain_state_simple(state)} - {percentage:.1f}% –≤—Ä–µ–º–µ–Ω–∏")
    
    def _get_trading_signal(self, state: str) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        parts = state.split('_')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        trend = parts[0] if len(parts) > 0 else 'T1'
        volatility = parts[1] if len(parts) > 1 else 'V1'
        rsi = parts[2] if len(parts) > 2 else 'R1'
        volume = parts[3] if len(parts) > 3 else 'O1'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        if trend == 'T2' and rsi == 'R0':  # –†–æ—Å—Ç + –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            return {
                'action': '–ü–û–ö–£–ü–ö–ê',
                'emoji': 'üü¢',
                'explanation': '–†—ã–Ω–æ–∫ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å - —Ö–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞',
                'strength': '–°–∏–ª—å–Ω—ã–π'
            }
        elif trend == 'T0' and rsi == 'R2':  # –ü–∞–¥–µ–Ω–∏–µ + –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            return {
                'action': '–ü–†–û–î–ê–ñ–ê',
                'emoji': 'üî¥',
                'explanation': '–†—ã–Ω–æ–∫ –ø–∞–¥–∞–µ—Ç, RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å - –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏',
                'strength': '–°–∏–ª—å–Ω—ã–π'
            }
        elif trend == 'T2' and volume == 'O2':  # –†–æ—Å—Ç + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            return {
                'action': '–ü–û–ö–£–ü–ö–ê',
                'emoji': 'üü¢',
                'explanation': '–†–æ—Å—Ç —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É',
                'strength': '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π'
            }
        elif trend == 'T0' and volume == 'O2':  # –ü–∞–¥–µ–Ω–∏–µ + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            return {
                'action': '–ü–†–û–î–ê–ñ–ê',
                'emoji': 'üî¥',
                'explanation': '–ü–∞–¥–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É',
                'strength': '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π'
            }
        else:
            return {
                'action': '–ù–ï–ô–¢–†–ê–õ–¨–ù–û',
                'emoji': '‚ö™',
                'explanation': '–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã - –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π',
                'strength': '–°–ª–∞–±—ã–π'
            }
    
    def _show_trading_recommendations(self, step: int, signal: Dict, symbol: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        if signal['action'] == '–ù–ï–ô–¢–†–ê–õ–¨–ù–û':
            return
        
        st.markdown("#### üí∞ –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        if self.current_price is None:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤")
            return
        
        current_price = self.current_price
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
        if signal['action'] == '–ü–û–ö–£–ü–ö–ê':
            # –î–ª—è –ø–æ–∫—É–ø–∫–∏
            entry_price = current_price
            stop_loss = current_price * 0.95  # -5% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit_1 = current_price * 1.10  # +10% –ø–µ—Ä–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            take_profit_2 = current_price * 1.20  # +20% –≤—Ç–æ—Ä–æ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            
            st.markdown("**üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫—É–ø–∫–∏:**")
            st.write(f"‚Ä¢ **–í—Ö–æ–¥:** ${entry_price:,.2f}")
            st.write(f"‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å:** ${stop_loss:,.2f} (-5%)")
            st.write(f"‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 1:** ${take_profit_1:,.2f} (+10%)")
            st.write(f"‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2:** ${take_profit_2:,.2f} (+20%)")
            st.write(f"‚Ä¢ **–†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å:** 1:2 (—Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)")
            
        elif signal['action'] == '–ü–†–û–î–ê–ñ–ê':
            # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏
            entry_price = current_price
            stop_loss = current_price * 1.05  # +5% —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit_1 = current_price * 0.90  # -10% –ø–µ—Ä–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            take_profit_2 = current_price * 0.80  # -20% –≤—Ç–æ—Ä–æ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            
            st.markdown("**üìâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–∞–∂–∏:**")
            st.write(f"‚Ä¢ **–í—Ö–æ–¥:** ${entry_price:,.2f}")
            st.write(f"‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å:** ${stop_loss:,.2f} (+5%)")
            st.write(f"‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 1:** ${take_profit_1:,.2f} (-10%)")
            st.write(f"‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2:** ${take_profit_2:,.2f} (-20%)")
            st.write(f"‚Ä¢ **–†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å:** 1:2 (—Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        st.markdown("**üéØ –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —É—Ä–æ–≤–Ω–∏?**")
        st.write("‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å 5%** - –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –±–æ–ª—å—à–∏—Ö –ø–æ—Ç–µ—Ä—å")
        st.write("‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 10%** - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å")
        st.write("‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 20%** - –∞–º–±–∏—Ü–∏–æ–∑–Ω–∞—è —Ü–µ–ª—å")
        st.write("‚Ä¢ **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:2** - —Ä–∏—Å–∫ –º–µ–Ω—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        st.warning("‚ö†Ô∏è **–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:**")
        st.write("‚Ä¢ –≠—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑, –∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è")
        st.write("‚Ä¢ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å")
        st.write("‚Ä¢ –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª—å—à–µ 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞")
        st.write("‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏")
    
    def _show_wave_analysis(self, data: pd.DataFrame):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑"""
        
        st.markdown("---")
        st.markdown("### üåä –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑")
        
        st.info("""
        **üåä –ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑?**
        
        –†—ã–Ω–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–æ–ª–Ω–∞–º–∏ - –ø–æ–¥—ä–µ–º—ã –∏ —Å–ø–∞–¥—ã. 
        –ú—ã –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ.
        """)
        
        # –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
        if len(data) >= 50:
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
            highs = data['High'].rolling(window=5, center=True).max() == data['High']
            lows = data['Low'].rolling(window=5, center=True).min() == data['Low']
            
            # –°—á–∏—Ç–∞–µ–º –≤–æ–ª–Ω—ã
            wave_count = highs.sum() + lows.sum()
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üåä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω", wave_count)
            
            with col2:
                avg_wave_length = len(data) / wave_count if wave_count > 0 else 0
                st.metric("üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã", f"{avg_wave_length:.1f} –¥–Ω–µ–π")
            
            with col3:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É
                recent_data = data.tail(10)
                if recent_data['Close'].iloc[-1] > recent_data['Close'].iloc[0]:
                    phase = "üìà –í–æ—Å—Ö–æ–¥—è—â–∞—è –≤–æ–ª–Ω–∞"
                elif recent_data['Close'].iloc[-1] < recent_data['Close'].iloc[0]:
                    phase = "üìâ –ù–∏—Å—Ö–æ–¥—è—â–∞—è –≤–æ–ª–Ω–∞"
                else:
                    phase = "‚û°Ô∏è –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è"
                
                st.metric("üéØ –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞", phase)
            
            # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤–æ–ª–Ω
            fig = go.Figure()
            
            # –¶–µ–Ω–∞
            fig.add_trace(go.Scatter(
                x=data.index,
                y=data['Close'],
                mode='lines',
                name='–¶–µ–Ω–∞',
                line=dict(color='blue', width=2)
            ))
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
            if highs.any():
                fig.add_trace(go.Scatter(
                    x=data[highs].index,
                    y=data[highs]['High'],
                    mode='markers',
                    name='–í–µ—Ä—à–∏–Ω—ã –≤–æ–ª–Ω',
                    marker=dict(color='red', size=8, symbol='triangle-up')
                ))
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
            if lows.any():
                fig.add_trace(go.Scatter(
                    x=data[lows].index,
                    y=data[lows]['Low'],
                    mode='markers',
                    name='–û—Å–Ω–æ–≤–∞–Ω–∏—è –≤–æ–ª–Ω',
                    marker=dict(color='green', size=8, symbol='triangle-down')
                ))
            
            fig.update_layout(
                title="–í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã",
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–¶–µ–Ω–∞",
                height=500
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–æ–ª–Ω
            st.markdown("#### üìö –ö–∞–∫ —á–∏—Ç–∞—Ç—å –≤–æ–ª–Ω—ã:")
            st.write("‚Ä¢ **üî¥ –ö—Ä–∞—Å–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏** - –≤–µ—Ä—à–∏–Ω—ã –≤–æ–ª–Ω (–º–∞–∫—Å–∏–º—É–º—ã)")
            st.write("‚Ä¢ **üü¢ –ó–µ–ª–µ–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏** - –æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤–æ–ª–Ω (–º–∏–Ω–∏–º—É–º—ã)")
            st.write("‚Ä¢ **üìà –í–æ—Å—Ö–æ–¥—è—â–∏–µ –≤–æ–ª–Ω—ã** - —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –æ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫ –≤–µ—Ä—à–∏–Ω–µ")
            st.write("‚Ä¢ **üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–µ –≤–æ–ª–Ω—ã** - —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –æ—Ç –≤–µ—Ä—à–∏–Ω—ã –∫ –æ—Å–Ω–æ–≤–∞–Ω–∏—é")
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–Ω
            st.markdown("#### üí° –¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã:")
            if phase == "üìà –í–æ—Å—Ö–æ–¥—è—â–∞—è –≤–æ–ª–Ω–∞":
                st.success("üü¢ **–ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–∞ –æ—Ç–∫–∞—Ç–∞—Ö** - —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–∞–Ω–∏—é –≤–æ–ª–Ω—ã")
            elif phase == "üìâ –ù–∏—Å—Ö–æ–¥—è—â–∞—è –≤–æ–ª–Ω–∞":
                st.warning("üî¥ **–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–∞ –æ—Ç—Å–∫–æ–∫–∞—Ö** - —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–µ—Ä—à–∏–Ω–µ –≤–æ–ª–Ω—ã")
            else:
                st.info("‚ö™ **–ñ–¥–∏—Ç–µ –ø—Ä–æ–±–æ—è** - —Ü–µ–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º")
    
    def _get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if 'analysis_data' in st.session_state:
                return st.session_state.analysis_data['Close'].iloc[-1]
            
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.data_fetcher.fetch_data(symbol, "5d")
            if data is not None and not data.empty:
                return data['Close'].iloc[-1]
            
            # Fallback —Ü–µ–Ω–∞
            return 50000.0
        except:
            return 50000.0
    
    def _display_market_summary(self, market_summary: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        
        st.markdown("### üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            trend_emoji = "üü¢" if market_summary['overall_trend'] == 'BULLISH' else "üî¥" if market_summary['overall_trend'] == 'BEARISH' else "‚ö™"
            st.metric("üìà –û–±—â–∏–π —Ç—Ä–µ–Ω–¥", f"{trend_emoji} {market_summary['overall_trend']}")
        
        with col2:
            st.metric("üí™ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞", f"{market_summary['trend_strength']:.1%}")
        
        with col3:
            st.metric("üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤", market_summary['total_signals'])
        
        with col4:
            high_conf = market_summary['high_confidence']
            st.metric("üéØ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{high_conf}/{market_summary['total_signals']}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("**üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"üü¢ **–ü–æ–∫—É–ø–∫–∏:** {market_summary['buy_signals']}")
            st.markdown(f"üî¥ **–ü—Ä–æ–¥–∞–∂–∏:** {market_summary['sell_signals']}")
            st.markdown(f"‚ö™ **–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ:** {market_summary['neutral_signals']}")
        
        with col2:
            st.markdown(f"üü¢ **–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {market_summary['high_confidence']}")
            st.markdown(f"üü° **–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {market_summary['medium_confidence']}")
            st.markdown(f"üî¥ **–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {market_summary['low_confidence']}")
        
        with col3:
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            if market_summary['overall_trend'] == 'BULLISH':
                st.success("**üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –§–æ–∫—É—Å –Ω–∞ –ø–æ–∫—É–ø–∫–∞—Ö")
            elif market_summary['overall_trend'] == 'BEARISH':
                st.error("**üìâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂–∞—Ö")
            else:
                st.info("**‚ö™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
            
            if market_summary['high_confidence'] > market_summary['low_confidence']:
                st.success("**‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤:** –•–æ—Ä–æ—à–µ–µ")
            else:
                st.warning("**‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤:** –°–º–µ—à–∞–Ω–Ω–æ–µ")
