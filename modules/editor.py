import streamlit as st
import re
from utils.storage import save_content_to_github as save_content
from utils.storage import load_content_from_github as load_content

try:
    from streamlit_quill import st_quill
    QUILL_AVAILABLE = True
except Exception:
    QUILL_AVAILABLE = False


# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def _init_content_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º."""
    if "blog_content" not in st.session_state:
        st.session_state.blog_content = load_content()
    if "edit_mode" not in st.session_state:
        st.session_state.edit_mode = {}  # dict: section_name -> bool


def auto_embed_images(html: str) -> str:
    """–ê–≤—Ç–æ-–≤–∫–ª–µ–π–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç —É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ <img>."""
    if not html:
        return html

    # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫–∏ <a href="...">, –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ—Ç <img>
    def replace_a(match):
        href = match.group(1)
        inner = match.group(2)
        if '<img' in inner.lower():
            return match.group(0)  # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return f'<img src="{href}" style="max-width:100%;height:auto;" />'

    html = re.sub(
        r'<a[^>]+href="(https?://[^\s"]+\.(?:png|jpe?g|gif))"[^>]*>(.*?)</a>',
        replace_a,
        html,
        flags=re.IGNORECASE | re.DOTALL
    )

    # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ¬´—á–∏—Å—Ç—ã–µ¬ª URL, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–Ω—É—Ç—Ä–∏ <img> –∏–ª–∏ <a>
    def replace_url(match):
        url = match.group(0)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥ URL –Ω–µ—Ç src= –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ <img>
        if re.search(r'src=[\'"]{}[\'"]'.format(re.escape(url)), html):
            return url
        return f'<img src="{url}" style="max-width:100%;height:auto;" />'

    html = re.sub(
        r'https?://[^\s"<]+\.(?:png|jpe?g|gif)',
        replace_url,
        html,
        flags=re.IGNORECASE
    )

    return html


def render_editable_page(section_name: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    _init_content_state()

    if not QUILL_AVAILABLE:
        st.error("–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    # --- –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    if st.session_state.edit_mode.get(section_name, False):
        col1, col2 = st.columns([1, 1])
        with col1:
            save_clicked = st.button("üíæ", type="primary", key=f"save_{section_name}")
        with col2:
            cancel_clicked = st.button("‚ùå", key=f"cancel_{section_name}")

        # –†–µ–¥–∞–∫—Ç–æ—Ä Quill
        current_html = st.session_state.blog_content.get(section_name, "")
        html = st_quill(
            value=current_html,
            html=True,
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç‚Ä¶",
            key=f"quill_{section_name}",
        )

        if save_clicked:
            sanitized = auto_embed_images(html or "")
            st.session_state.blog_content[section_name] = sanitized
            save_content(st.session_state.blog_content)
            st.session_state.edit_mode[section_name] = False
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")

        if cancel_clicked:
            st.session_state.edit_mode[section_name] = False
            st.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    else:
        # --- –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---
        if st.button("‚úèÔ∏è ", key=f"edit_{section_name}"):
            st.session_state.edit_mode[section_name] = True

        st.markdown(
            f"""
            <div style="font-size:16px; line-height:1.6; padding:0.5em;
                        border-left:4px solid #4CAF50; cursor:text;">
                {st.session_state.blog_content.get(section_name, "")}
            </div>
            """,
            unsafe_allow_html=True
        )