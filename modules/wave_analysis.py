"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ª–Ω—ã –≠–ª–ª–∏–æ—Ç—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º–ø—É–ª—å—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
"""
import streamlit as st
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from .data_fetcher import CryptoDataFetcher

class WaveAnalysis:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.data_fetcher = CryptoDataFetcher()
        self.timeframes = {
            '1m': '1 –º–∏–Ω—É—Ç–∞',
            '5m': '5 –º–∏–Ω—É—Ç', 
            '15m': '15 –º–∏–Ω—É—Ç',
            '1h': '1 —á–∞—Å',
            '4h': '4 —á–∞—Å–∞',
            '1d': '1 –¥–µ–Ω—å',
            '1w': '1 –Ω–µ–¥–µ–ª—è'
        }
        
    def render_wave_analysis_interface(self):
        """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        st.markdown("## üåä –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        st.info("""
        **üåä –ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑?**
        
        –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–æ—Ä–∏–∏ –≠–ª–ª–∏–æ—Ç—Ç–∞ - —Ä—ã–Ω–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–æ–ª–Ω–∞–º–∏:
        - **üìà –ò–º–ø—É–ª—å—Å** - 5 –≤–æ–ª–Ω –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞ (1-2-3-4-5)
        - **üìâ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è** - 3 –≤–æ–ª–Ω—ã –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ (A-B-C)
        - **üîÑ –¶–∏–∫–ª—ã** - –∏–º–ø—É–ª—å—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è
        
        **üéØ –¶–µ–ª—å:** –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–æ–ª–Ω—É –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        """)
        
        # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_options = self.data_fetcher.get_available_symbols()
            selected_crypto = st.selectbox(
                "ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:",
                list(crypto_options.keys()),
                index=0
            )
            symbol = crypto_options[selected_crypto]
        
        with col2:
            # –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            selected_timeframe = st.selectbox(
                "‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º:",
                list(self.timeframes.keys()),
                index=5,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å
                format_func=lambda x: self.timeframes[x]
            )
        
        with col3:
            # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            analysis_period = st.selectbox(
                "üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
                ["3mo", "6mo", "1y", "2y"],
                index=2,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –≥–æ–¥
                format_func=lambda x: {
                    "3mo": "3 –º–µ—Å—è—Ü–∞",
                    "6mo": "6 –º–µ—Å—è—Ü–µ–≤", 
                    "1y": "1 –≥–æ–¥",
                    "2y": "2 –≥–æ–¥–∞"
                }[x]
            )
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üåä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ª–Ω—ã", use_container_width=True):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–Ω—ã..."):
                self._run_wave_analysis(symbol, selected_timeframe, analysis_period)
    
    def _run_wave_analysis(self, symbol: str, timeframe: str, period: str):
        """–ó–∞–ø—É—Å–∫ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self.data_fetcher.fetch_data(symbol, period)
        
        if data is None or data.empty:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
        st.session_state.wave_data = data
        st.session_state.wave_symbol = symbol
        st.session_state.wave_timeframe = timeframe
        st.session_state.wave_period = period
        
        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! {len(data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {period}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–Ω—ã
        wave_analysis = self._analyze_waves(data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._display_wave_analysis(wave_analysis, data, symbol, timeframe)
    
    def _analyze_waves(self, data: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–Ω –Ω–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
        highs, lows = self._find_extremes(data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ª–Ω—ã
        waves = self._identify_waves(data, highs, lows)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–æ–ª–Ω—ã
        wave_classification = self._classify_waves(waves, data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É
        current_phase = self._determine_current_phase(waves, data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = self._analyze_patterns(waves, data)
        
        return {
            'extremes': {'highs': highs, 'lows': lows},
            'waves': waves,
            'classification': wave_classification,
            'current_phase': current_phase,
            'patterns': patterns,
            'data': data
        }
    
    def _find_extremes(self, data: pd.DataFrame, window: int = 5) -> Tuple[List, List]:
        """–ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã"""
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
        highs = data['High'].rolling(window=window, center=True).max() == data['High']
        high_points = data[highs].copy()
        high_points = high_points.reset_index()
        high_points['type'] = 'high'
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
        lows = data['Low'].rolling(window=window, center=True).min() == data['Low']
        low_points = data[lows].copy()
        low_points = low_points.reset_index()
        low_points['type'] = 'low'
        
        return high_points, low_points
    
    def _identify_waves(self, data: pd.DataFrame, highs: pd.DataFrame, lows: pd.DataFrame) -> List[Dict]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ª–Ω"""
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
        all_extremes = []
        
        for _, row in highs.iterrows():
            all_extremes.append({
                'date': row['Date'],
                'price': row['High'],
                'type': 'high',
                'index': row.name
            })
        
        for _, row in lows.iterrows():
            all_extremes.append({
                'date': row['Date'],
                'price': row['Low'],
                'type': 'low',
                'index': row.name
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        all_extremes.sort(key=lambda x: x['date'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ª–Ω—ã
        waves = []
        for i in range(len(all_extremes) - 1):
            current = all_extremes[i]
            next_point = all_extremes[i + 1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–Ω—ã
            if current['type'] == 'low' and next_point['type'] == 'high':
                direction = 'up'
            elif current['type'] == 'high' and next_point['type'] == 'low':
                direction = 'down'
            else:
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–ª–Ω—ã
            price_change = next_point['price'] - current['price']
            price_change_pct = (price_change / current['price']) * 100
            duration = (next_point['date'] - current['date']).days
            
            wave = {
                'start_date': current['date'],
                'end_date': next_point['date'],
                'start_price': current['price'],
                'end_price': next_point['price'],
                'direction': direction,
                'change': price_change,
                'change_pct': price_change_pct,
                'duration': duration,
                'start_index': current['index'],
                'end_index': next_point['index']
            }
            
            waves.append(wave)
        
        return waves
    
    def _classify_waves(self, waves: List[Dict], data: pd.DataFrame) -> Dict:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ª–Ω –Ω–∞ –∏–º–ø—É–ª—å—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"""
        
        if len(waves) < 5:
            return {'type': 'insufficient_data', 'waves': waves}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–æ–ª–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        recent_waves = waves[-5:]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥
        total_change = sum(wave['change'] for wave in recent_waves)
        
        if total_change > 0:
            trend = 'bullish'
        else:
            trend = 'bearish'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        pattern = self._analyze_elliott_pattern(recent_waves, trend)
        
        return {
            'type': pattern['type'],
            'trend': trend,
            'confidence': pattern['confidence'],
            'waves': recent_waves,
            'description': pattern['description']
        }
    
    def _analyze_elliott_pattern(self, waves: List[Dict], trend: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≠–ª–ª–∏–æ—Ç—Ç–∞"""
        
        if len(waves) < 5:
            return {
                'type': 'insufficient_data',
                'confidence': 0,
                'description': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤–æ–ª–Ω
        wave_changes = [abs(wave['change_pct']) for wave in waves]
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–ø—É–ª—å—Å–∞/–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        if len(wave_changes) >= 5:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–º–ø—É–ª—å—Å (–≤–æ–ª–Ω–∞ 3 —Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è)
            if wave_changes[2] > wave_changes[0] and wave_changes[2] > wave_changes[4]:
                return {
                    'type': 'impulse',
                    'confidence': 0.7,
                    'description': '–ò–º–ø—É–ª—å—Å–Ω–∞—è –≤–æ–ª–Ω–∞ - –≤–æ–ª–Ω–∞ 3 —Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è'
                }
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é (–≤–æ–ª–Ω—ã A –∏ C –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã)
            elif abs(wave_changes[0] - wave_changes[2]) < 0.5:
                return {
                    'type': 'correction',
                    'confidence': 0.6,
                    'description': '–ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω–∞—è –≤–æ–ª–Ω–∞ - –≤–æ–ª–Ω—ã A –∏ C –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã'
                }
        
        return {
            'type': 'unclear',
            'confidence': 0.3,
            'description': '–ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ—è—Å–µ–Ω - –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
        }
    
    def _determine_current_phase(self, waves: List[Dict], data: pd.DataFrame) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –≤–æ–ª–Ω—ã"""
        
        if not waves:
            return {'phase': 'unknown', 'description': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ª–Ω–∞—Ö'}
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–æ–ª–Ω—É
        last_wave = waves[-1]
        current_price = data['Close'].iloc[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–æ–ª–Ω—ã
        if last_wave['direction'] == 'up':
            if current_price > last_wave['end_price']:
                phase = 'continuation'
                description = '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–π –≤–æ–ª–Ω—ã'
            elif current_price < last_wave['start_price']:
                phase = 'reversal'
                description = '–†–∞–∑–≤–æ—Ä–æ—Ç –ø–æ—Å–ª–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–π –≤–æ–ª–Ω—ã'
            else:
                phase = 'retracement'
                description = '–û—Ç–∫–∞—Ç –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–π –≤–æ–ª–Ω–µ'
        else:
            if current_price < last_wave['end_price']:
                phase = 'continuation'
                description = '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –≤–æ–ª–Ω—ã'
            elif current_price > last_wave['start_price']:
                phase = 'reversal'
                description = '–†–∞–∑–≤–æ—Ä–æ—Ç –ø–æ—Å–ª–µ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –≤–æ–ª–Ω—ã'
            else:
                phase = 'retracement'
                description = '–û—Ç–∫–∞—Ç –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –≤–æ–ª–Ω–µ'
        
        return {
            'phase': phase,
            'description': description,
            'last_wave': last_wave
        }
    
    def _analyze_patterns(self, waves: List[Dict], data: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–æ–ª–Ω"""
        
        if len(waves) < 3:
            return {'patterns': [], 'summary': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ª–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'}
        
        patterns = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–æ–ª–Ω—ã
        recent_waves = waves[-3:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        if self._is_triangle(recent_waves):
            patterns.append({
                'type': 'triangle',
                'description': '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è',
                'confidence': 0.7
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–ª–∞–≥
        if self._is_flag(recent_waves):
            patterns.append({
                'type': 'flag',
                'description': '–§–ª–∞–≥ - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞',
                'confidence': 0.6
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª–∏–Ω
        if self._is_wedge(recent_waves):
            patterns.append({
                'type': 'wedge',
                'description': '–ö–ª–∏–Ω - –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç',
                'confidence': 0.5
            })
        
        return {
            'patterns': patterns,
            'summary': f'–ù–∞–π–¥–µ–Ω–æ {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'
        }
    
    def _is_triangle(self, waves: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"""
        if len(waves) < 3:
            return False
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–ª–Ω—ã —Å–∂–∏–º–∞—é—Ç—Å—è
        changes = [abs(wave['change_pct']) for wave in waves]
        return changes[0] > changes[1] > changes[2]
    
    def _is_flag(self, waves: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª–∞–≥"""
        if len(waves) < 3:
            return False
        
        # –§–ª–∞–≥ - —Å–∏–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞, –∑–∞—Ç–µ–º —Å–ª–∞–±—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        first_wave = abs(waves[0]['change_pct'])
        other_waves = [abs(wave['change_pct']) for wave in waves[1:]]
        
        return first_wave > max(other_waves) * 2
    
    def _is_wedge(self, waves: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–Ω"""
        if len(waves) < 3:
            return False
        
        # –ö–ª–∏–Ω - –≤–æ–ª–Ω—ã —Å–∂–∏–º–∞—é—Ç—Å—è, –Ω–æ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        directions = [wave['direction'] for wave in waves]
        return len(set(directions)) == 1  # –í—Å–µ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    
    def _display_wave_analysis(self, analysis: Dict, data: pd.DataFrame, symbol: str, timeframe: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        st.markdown("---")
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        ">
            <h2 style="color: white; margin: 0; font-size: 28px;">
                üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            </h2>
            <p style="color: #f0f0f0; margin: 10px 0 0 0; font-size: 16px;">
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç—Ç–∞ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                color: white;
                padding: 15px;
                border-radius: 8px;
                text-align: center;
                margin: 5px 0;
            ">
                <h4 style="margin: 0; font-size: 18px;">ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</h4>
                <p style="margin: 5px 0 0 0; font-size: 16px; font-weight: bold;">
                    {symbol}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #17a2b8 0%, #6f42c1 100%);
                color: white;
                padding: 15px;
                border-radius: 8px;
                text-align: center;
                margin: 5px 0;
            ">
                <h4 style="margin: 0; font-size: 18px;">‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º</h4>
                <p style="margin: 5px 0 0 0; font-size: 16px; font-weight: bold;">
                    {self.timeframes[timeframe]}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #fd7e14 0%, #e83e8c 100%);
                color: white;
                padding: 15px;
                border-radius: 8px;
                text-align: center;
                margin: 5px 0;
            ">
                <h4 style="margin: 0; font-size: 18px;">üåä –ù–∞–π–¥–µ–Ω–æ –≤–æ–ª–Ω</h4>
                <p style="margin: 5px 0 0 0; font-size: 16px; font-weight: bold;">
                    {len(analysis['waves'])}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            pattern_type = analysis['classification']['type'].upper() if analysis['classification']['type'] != 'insufficient_data' else "–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–•"
            pattern_color = "#28a745" if analysis['classification']['type'] != 'insufficient_data' else "#dc3545"
            
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, {pattern_color} 0%, #6c757d 100%);
                color: white;
                padding: 15px;
                border-radius: 8px;
                text-align: center;
                margin: 5px 0;
            ">
                <h4 style="margin: 0; font-size: 18px;">üìà –¢–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞</h4>
                <p style="margin: 5px 0 0 0; font-size: 16px; font-weight: bold;">
                    {pattern_type}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ª–Ω
        self._display_wave_classification(analysis['classification'])
        
        # –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞
        self._display_current_phase(analysis['current_phase'])
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
        self._display_patterns(analysis['patterns'])
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤–æ–ª–Ω
        self._plot_wave_chart(analysis, data, symbol)
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._display_trading_recommendations(analysis, symbol)
    
    def _display_wave_classification(self, classification: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ª–Ω"""
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: center;
        ">
            <h3 style="margin: 0; color: #495057; font-size: 22px;">
                üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ª–Ω
            </h3>
        </div>
        """, unsafe_allow_html=True)
        
        if classification['type'] == 'insufficient_data':
            st.markdown("""
            <div style="
                background: #fff3cd;
                border: 1px solid #ffeaa7;
                color: #856404;
                padding: 15px;
                border-radius: 8px;
                text-align: center;
                margin: 10px 0;
            ">
                <h4 style="margin: 0; color: #856404;">‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ª–Ω</h4>
            </div>
            """, unsafe_allow_html=True)
            return
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if classification['type'] == 'impulse':
                card_color = "#d4edda"
                border_color = "#c3e6cb"
                text_color = "#155724"
            elif classification['type'] == 'correction':
                card_color = "#d1ecf1"
                border_color = "#bee5eb"
                text_color = "#0c5460"
            else:
                card_color = "#fff3cd"
                border_color = "#ffeaa7"
                text_color = "#856404"
            
            st.markdown(f"""
            <div style="
                background: {card_color};
                border: 2px solid {border_color};
                border-radius: 8px;
                padding: 20px;
                margin: 10px 0;
            ">
                <h4 style="margin: 0 0 15px 0; color: {text_color}; text-align: center;">
                    üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                </h4>
                <p style="margin: 8px 0; color: {text_color}; font-weight: bold;">
                    <span style="color: #495057;">–¢–∏–ø:</span> {classification['type'].upper()}
                </p>
                <p style="margin: 8px 0; color: {text_color}; font-weight: bold;">
                    <span style="color: #495057;">–¢—Ä–µ–Ω–¥:</span> {classification['trend']}
                </p>
                <p style="margin: 8px 0; color: {text_color}; font-weight: bold;">
                    <span style="color: #495057;">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span> {classification['confidence']:.1%}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div style="
                background: #ffffff;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                padding: 20px;
                margin: 10px 0;
            ">
                <h4 style="margin: 0 0 15px 0; color: #495057; text-align: center;">
                    üìù –û–ø–∏—Å–∞–Ω–∏–µ
                </h4>
                <p style="margin: 8px 0; color: #495057; font-size: 16px;">
                    {classification['description']}
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if classification['type'] == 'impulse':
                st.markdown("""
                <div style="
                    background: #d4edda;
                    border: 2px solid #c3e6cb;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h5 style="margin: 0; color: #155724;">üìà –ò–º–ø—É–ª—å—Å</h5>
                    <p style="margin: 5px 0 0 0; color: #155724; font-weight: bold;">
                        –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞
                    </p>
                </div>
                """, unsafe_allow_html=True)
            elif classification['type'] == 'correction':
                st.markdown("""
                <div style="
                    background: #d1ecf1;
                    border: 2px solid #bee5eb;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h5 style="margin: 0; color: #0c5460;">üìâ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è</h5>
                    <p style="margin: 5px 0 0 0; color: #0c5460; font-weight: bold;">
                        –û—Ç–∫–∞—Ç –ø—Ä–æ—Ç–∏–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
                    </p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div style="
                    background: #fff3cd;
                    border: 2px solid #ffeaa7;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h5 style="margin: 0; color: #856404;">‚ùì –ù–µ—è—Å–Ω–æ</h5>
                    <p style="margin: 5px 0 0 0; color: #856404; font-weight: bold;">
                        –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    </p>
                </div>
                """, unsafe_allow_html=True)
    
    def _display_current_phase(self, phase: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã"""
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: center;
        ">
            <h3 style="margin: 0; color: #495057; font-size: 22px;">
                üåä –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞
            </h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
            if phase['phase'] == 'continuation':
                card_color = "#d4edda"
                border_color = "#c3e6cb"
                text_color = "#155724"
            elif phase['phase'] == 'reversal':
                card_color = "#fff3cd"
                border_color = "#ffeaa7"
                text_color = "#856404"
            elif phase['phase'] == 'retracement':
                card_color = "#d1ecf1"
                border_color = "#bee5eb"
                text_color = "#0c5460"
            else:
                card_color = "#f8d7da"
                border_color = "#f5c6cb"
                text_color = "#721c24"
            
            st.markdown(f"""
            <div style="
                background: {card_color};
                border: 2px solid {border_color};
                border-radius: 8px;
                padding: 20px;
                margin: 10px 0;
            ">
                <h4 style="margin: 0 0 15px 0; color: {text_color}; text-align: center;">
                    üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∑–µ
                </h4>
                <p style="margin: 8px 0; color: {text_color}; font-weight: bold;">
                    <span style="color: #495057;">–§–∞–∑–∞:</span> {phase['phase'].upper()}
                </p>
                <p style="margin: 8px 0; color: {text_color}; font-weight: bold;">
                    <span style="color: #495057;">–û–ø–∏—Å–∞–Ω–∏–µ:</span> {phase['description']}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
            if phase['phase'] == 'continuation':
                st.markdown("""
                <div style="
                    background: #d4edda;
                    border: 2px solid #c3e6cb;
                    border-radius: 8px;
                    padding: 20px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h4 style="margin: 0; color: #155724;">üü¢ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ</h4>
                    <p style="margin: 10px 0 0 0; color: #155724; font-weight: bold;">
                        –¢—Ä–µ–Ω–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
                    </p>
                    <p style="margin: 5px 0 0 0; color: #155724; font-size: 14px;">
                        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                    </p>
                </div>
                """, unsafe_allow_html=True)
            elif phase['phase'] == 'reversal':
                st.markdown("""
                <div style="
                    background: #fff3cd;
                    border: 2px solid #ffeaa7;
                    border-radius: 8px;
                    padding: 20px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h4 style="margin: 0; color: #856404;">üü° –†–∞–∑–≤–æ—Ä–æ—Ç</h4>
                    <p style="margin: 10px 0 0 0; color: #856404; font-weight: bold;">
                        –í–æ–∑–º–æ–∂–Ω–∞ —Å–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞
                    </p>
                    <p style="margin: 5px 0 0 0; color: #856404; font-size: 14px;">
                        –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                    </p>
                </div>
                """, unsafe_allow_html=True)
            elif phase['phase'] == 'retracement':
                st.markdown("""
                <div style="
                    background: #d1ecf1;
                    border: 2px solid #bee5eb;
                    border-radius: 8px;
                    padding: 20px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h4 style="margin: 0; color: #0c5460;">üîµ –û—Ç–∫–∞—Ç</h4>
                    <p style="margin: 10px 0 0 0; color: #0c5460; font-weight: bold;">
                        –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
                    </p>
                    <p style="margin: 5px 0 0 0; color: #0c5460; font-size: 14px;">
                        –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ
                    </p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div style="
                    background: #f8d7da;
                    border: 2px solid #f5c6cb;
                    border-radius: 8px;
                    padding: 20px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h4 style="margin: 0; color: #721c24;">‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</h4>
                    <p style="margin: 10px 0 0 0; color: #721c24; font-weight: bold;">
                        –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
                    </p>
                    <p style="margin: 5px 0 0 0; color: #721c24; font-size: 14px;">
                        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    </p>
                </div>
                """, unsafe_allow_html=True)
    
    def _display_patterns(self, patterns: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        
        st.markdown("#### üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        
        if not patterns['patterns']:
            st.info("‚ÑπÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return
        
        for pattern in patterns['patterns']:
            with st.container():
                col1, col2, col3 = st.columns([1, 2, 1])
                
                with col1:
                    if pattern['type'] == 'triangle':
                        st.markdown("üî∫ **–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫**")
                    elif pattern['type'] == 'flag':
                        st.markdown("üèÅ **–§–ª–∞–≥**")
                    elif pattern['type'] == 'wedge':
                        st.markdown("üî∫ **–ö–ª–∏–Ω**")
                
                with col2:
                    st.markdown(f"**{pattern['description']}**")
                
                with col3:
                    st.markdown(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pattern['confidence']:.1%}")
    
    def _plot_wave_chart(self, analysis: Dict, data: pd.DataFrame, symbol: str):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–æ–ª–Ω"""
        
        st.markdown("#### üìà –ì—Ä–∞—Ñ–∏–∫ –≤–æ–ª–Ω")
        
        fig = go.Figure()
        
        # –¶–µ–Ω–∞
        fig.add_trace(go.Scatter(
            x=data.index,
            y=data['Close'],
            mode='lines',
            name='–¶–µ–Ω–∞',
            line=dict(color='blue', width=2)
        ))
        
        # –í–æ–ª–Ω—ã
        waves = analysis['waves']
        for i, wave in enumerate(waves[-10:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–æ–ª–Ω
            color = 'green' if wave['direction'] == 'up' else 'red'
            
            fig.add_trace(go.Scatter(
                x=[wave['start_date'], wave['end_date']],
                y=[wave['start_price'], wave['end_price']],
                mode='lines+markers',
                name=f'–í–æ–ª–Ω–∞ {i+1}',
                line=dict(color=color, width=3),
                marker=dict(size=8),
                showlegend=False
            ))
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
        highs = analysis['extremes']['highs']
        lows = analysis['extremes']['lows']
        
        if not highs.empty:
            fig.add_trace(go.Scatter(
                x=highs['Date'],
                y=highs['High'],
                mode='markers',
                name='–í–µ—Ä—à–∏–Ω—ã',
                marker=dict(color='red', size=6, symbol='triangle-up'),
                showlegend=False
            ))
        
        if not lows.empty:
            fig.add_trace(go.Scatter(
                x=lows['Date'],
                y=lows['Low'],
                mode='markers',
                name='–û—Å–Ω–æ–≤–∞–Ω–∏—è',
                marker=dict(color='green', size=6, symbol='triangle-down'),
                showlegend=False
            ))
        
        fig.update_layout(
            title=f"–í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ {symbol}",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–¶–µ–Ω–∞",
            height=600,
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def _display_trading_recommendations(self, analysis: Dict, symbol: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        ">
            <h2 style="color: white; margin: 0; font-size: 28px;">
                üí∞ –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </h2>
            <p style="color: #f0f0f0; margin: 10px 0 0 0; font-size: 16px;">
                –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        classification = analysis['classification']
        phase = analysis['current_phase']
        patterns = analysis['patterns']
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        if classification['type'] == 'impulse':
            if phase['phase'] == 'continuation':
                st.markdown("""
                <div style="
                    background: #d4edda;
                    border: 3px solid #28a745;
                    border-radius: 10px;
                    padding: 25px;
                    margin: 20px 0;
                    text-align: center;
                ">
                    <h3 style="margin: 0; color: #155724; font-size: 24px;">
                        üü¢ –ü–û–ö–£–ü–ö–ê
                    </h3>
                    <p style="margin: 10px 0 0 0; color: #155724; font-size: 18px; font-weight: bold;">
                        –ò–º–ø—É–ª—å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                    </p>
                </div>
                """, unsafe_allow_html=True)
                self._show_impulse_trading_plan(symbol, 'buy')
            elif phase['phase'] == 'retracement':
                st.markdown("""
                <div style="
                    background: #d1ecf1;
                    border: 3px solid #17a2b8;
                    border-radius: 10px;
                    padding: 25px;
                    margin: 20px 0;
                    text-align: center;
                ">
                    <h3 style="margin: 0; color: #0c5460; font-size: 24px;">
                        üîµ –û–ñ–ò–î–ê–ù–ò–ï
                    </h3>
                    <p style="margin: 10px 0 0 0; color: #0c5460; font-size: 18px; font-weight: bold;">
                        –û—Ç–∫–∞—Ç –≤ –∏–º–ø—É–ª—å—Å–µ, –∂–¥–∏—Ç–µ –≤—Ö–æ–¥–∞
                    </p>
                </div>
                """, unsafe_allow_html=True)
                self._show_retracement_trading_plan(symbol)
            else:
                st.markdown("""
                <div style="
                    background: #fff3cd;
                    border: 3px solid #ffc107;
                    border-radius: 10px;
                    padding: 25px;
                    margin: 20px 0;
                    text-align: center;
                ">
                    <h3 style="margin: 0; color: #856404; font-size: 24px;">
                        üü° –û–°–¢–û–†–û–ñ–ù–û
                    </h3>
                    <p style="margin: 10px 0 0 0; color: #856404; font-size: 18px; font-weight: bold;">
                        –í–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –∏–º–ø—É–ª—å—Å–∞
                    </p>
                </div>
                """, unsafe_allow_html=True)
        
        elif classification['type'] == 'correction':
            if phase['phase'] == 'continuation':
                st.markdown("""
                <div style="
                    background: #f8d7da;
                    border: 3px solid #dc3545;
                    border-radius: 10px;
                    padding: 25px;
                    margin: 20px 0;
                    text-align: center;
                ">
                    <h3 style="margin: 0; color: #721c24; font-size: 24px;">
                        üî¥ –ü–†–û–î–ê–ñ–ê
                    </h3>
                    <p style="margin: 10px 0 0 0; color: #721c24; font-size: 18px; font-weight: bold;">
                        –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                    </p>
                </div>
                """, unsafe_allow_html=True)
                self._show_impulse_trading_plan(symbol, 'sell')
            elif phase['phase'] == 'reversal':
                st.markdown("""
                <div style="
                    background: #d4edda;
                    border: 3px solid #28a745;
                    border-radius: 10px;
                    padding: 25px;
                    margin: 20px 0;
                    text-align: center;
                ">
                    <h3 style="margin: 0; color: #155724; font-size: 24px;">
                        üü¢ –ü–û–ö–£–ü–ö–ê
                    </h3>
                    <p style="margin: 10px 0 0 0; color: #155724; font-size: 18px; font-weight: bold;">
                        –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                    </p>
                </div>
                """, unsafe_allow_html=True)
                self._show_impulse_trading_plan(symbol, 'buy')
            else:
                st.markdown("""
                <div style="
                    background: #d1ecf1;
                    border: 3px solid #17a2b8;
                    border-radius: 10px;
                    padding: 25px;
                    margin: 20px 0;
                    text-align: center;
                ">
                    <h3 style="margin: 0; color: #0c5460; font-size: 24px;">
                        üîµ –û–ñ–ò–î–ê–ù–ò–ï
                    </h3>
                    <p style="margin: 10px 0 0 0; color: #0c5460; font-size: 18px; font-weight: bold;">
                        –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                    </p>
                </div>
                """, unsafe_allow_html=True)
        
        else:
            st.markdown("""
            <div style="
                background: #e2e3e5;
                border: 3px solid #6c757d;
                border-radius: 10px;
                padding: 25px;
                margin: 20px 0;
                text-align: center;
            ">
                <h3 style="margin: 0; color: #495057; font-size: 24px;">
                    ‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û
                </h3>
                <p style="margin: 10px 0 0 0; color: #495057; font-size: 18px; font-weight: bold;">
                    –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ—è—Å–µ–Ω, –∂–¥–∏—Ç–µ —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        if patterns['patterns']:
            st.markdown("""
            <div style="
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                padding: 20px;
                border-radius: 8px;
                margin: 20px 0;
            ">
                <h3 style="margin: 0 0 15px 0; color: #495057; text-align: center;">
                    üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                </h3>
            </div>
            """, unsafe_allow_html=True)
            
            for pattern in patterns['patterns']:
                if pattern['type'] == 'triangle':
                    st.markdown("""
                    <div style="
                        background: #fff3cd;
                        border: 2px solid #ffeaa7;
                        border-radius: 8px;
                        padding: 15px;
                        margin: 10px 0;
                    ">
                        <h5 style="margin: 0; color: #856404;">üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫</h5>
                        <p style="margin: 5px 0 0 0; color: #856404; font-weight: bold;">
                            –ñ–¥–∏—Ç–µ –ø—Ä–æ–±–æ—è –¥–ª—è –≤—Ö–æ–¥–∞
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                elif pattern['type'] == 'flag':
                    st.markdown("""
                    <div style="
                        background: #d4edda;
                        border: 2px solid #c3e6cb;
                        border-radius: 8px;
                        padding: 15px;
                        margin: 10px 0;
                    ">
                        <h5 style="margin: 0; color: #155724;">üèÅ –§–ª–∞–≥</h5>
                        <p style="margin: 5px 0 0 0; color: #155724; font-weight: bold;">
                            –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞, –≤—Ö–æ–¥–∏—Ç–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                elif pattern['type'] == 'wedge':
                    st.markdown("""
                    <div style="
                        background: #f8d7da;
                        border: 2px solid #f5c6cb;
                        border-radius: 8px;
                        padding: 15px;
                        margin: 10px 0;
                    ">
                        <h5 style="margin: 0; color: #721c24;">üî∫ –ö–ª–∏–Ω</h5>
                        <p style="margin: 5px 0 0 0; color: #721c24; font-weight: bold;">
                            –í–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
    
    def _show_impulse_trading_plan(self, symbol: str, direction: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∏–º–ø—É–ª—å—Å–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        if 'wave_data' in st.session_state:
            current_price = st.session_state.wave_data['Close'].iloc[-1]
        else:
            current_price = 50000  # Fallback
        
        if direction == 'buy':
            st.markdown("""
            <div style="
                background: #d4edda;
                border: 2px solid #c3e6cb;
                border-radius: 8px;
                padding: 20px;
                margin: 15px 0;
            ">
                <h4 style="margin: 0 0 15px 0; color: #155724; text-align: center;">
                    üìà –ü–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏
                </h4>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"""
                <div style="
                    background: #ffffff;
                    border: 1px solid #dee2e6;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 10px 0;
                ">
                    <h5 style="margin: 0 0 10px 0; color: #495057;">üí∞ –£—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞</h5>
                    <p style="margin: 5px 0; color: #28a745; font-weight: bold;">
                        üéØ –í—Ö–æ–¥: ${current_price:,.2f}
                    </p>
                    <p style="margin: 5px 0; color: #dc3545; font-weight: bold;">
                        üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${current_price * 0.95:,.2f} (-5%)
                    </p>
                    <p style="margin: 5px 0; color: #17a2b8; font-weight: bold;">
                        üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 1: ${current_price * 1.10:,.2f} (+10%)
                    </p>
                    <p style="margin: 5px 0; color: #17a2b8; font-weight: bold;">
                        üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2: ${current_price * 1.20:,.2f} (+20%)
                    </p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div style="
                    background: #ffffff;
                    border: 1px solid #dee2e6;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 10px 0;
                ">
                    <h5 style="margin: 0 0 10px 0; color: #495057;">üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è</h5>
                    <p style="margin: 5px 0; color: #495057; font-weight: bold;">
                        üí° –õ–æ–≥–∏–∫–∞: –ò–º–ø—É–ª—å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –≤—Ö–æ–¥–∏–º –ø–æ —Ç—Ä–µ–Ω–¥—É
                    </p>
                    <p style="margin: 5px 0; color: #495057;">
                        üìà –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:2 (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
                    </p>
                    <p style="margin: 5px 0; color: #495057;">
                        ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç: 1-3 –¥–Ω—è
                    </p>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="
                background: #f8d7da;
                border: 2px solid #f5c6cb;
                border-radius: 8px;
                padding: 20px;
                margin: 15px 0;
            ">
                <h4 style="margin: 0 0 15px 0; color: #721c24; text-align: center;">
                    üìâ –ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂–∏
                </h4>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"""
                <div style="
                    background: #ffffff;
                    border: 1px solid #dee2e6;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 10px 0;
                ">
                    <h5 style="margin: 0 0 10px 0; color: #495057;">üí∞ –£—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞</h5>
                    <p style="margin: 5px 0; color: #dc3545; font-weight: bold;">
                        üéØ –í—Ö–æ–¥: ${current_price:,.2f}
                    </p>
                    <p style="margin: 5px 0; color: #28a745; font-weight: bold;">
                        üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${current_price * 1.05:,.2f} (+5%)
                    </p>
                    <p style="margin: 5px 0; color: #17a2b8; font-weight: bold;">
                        üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 1: ${current_price * 0.90:,.2f} (-10%)
                    </p>
                    <p style="margin: 5px 0; color: #17a2b8; font-weight: bold;">
                        üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2: ${current_price * 0.80:,.2f} (-20%)
                    </p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div style="
                    background: #ffffff;
                    border: 1px solid #dee2e6;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 10px 0;
                ">
                    <h5 style="margin: 0 0 10px 0; color: #495057;">üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è</h5>
                    <p style="margin: 5px 0; color: #495057; font-weight: bold;">
                        üí° –õ–æ–≥–∏–∫–∞: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –≤—Ö–æ–¥–∏–º –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞
                    </p>
                    <p style="margin: 5px 0; color: #495057;">
                        üìâ –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:2 (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
                    </p>
                    <p style="margin: 5px 0; color: #495057;">
                        ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç: 1-3 –¥–Ω—è
                    </p>
                </div>
                """, unsafe_allow_html=True)
    
    def _show_retracement_trading_plan(self, symbol: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞"""
        
        st.markdown("""
        <div style="
            background: #d1ecf1;
            border: 2px solid #bee5eb;
            border-radius: 8px;
            padding: 20px;
            margin: 15px 0;
        ">
            <h4 style="margin: 0 0 15px 0; color: #0c5460; text-align: center;">
                üîµ –ü–ª–∞–Ω –¥–ª—è –æ—Ç–∫–∞—Ç–∞
            </h4>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="
                background: #ffffff;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
                margin: 10px 0;
            ">
                <h5 style="margin: 0 0 10px 0; color: #495057;">‚è≥ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–∂–∏–¥–∞–Ω–∏—è</h5>
                <p style="margin: 5px 0; color: #495057; font-weight: bold;">
                    üïê –ñ–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–∫–∞—Ç–∞
                </p>
                <p style="margin: 5px 0; color: #495057; font-weight: bold;">
                    üìà –í—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ø—Ä–æ–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞
                </p>
                <p style="margin: 5px 0; color: #495057; font-weight: bold;">
                    üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ (38.2%, 50%, 61.8%)
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div style="
                background: #ffffff;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
                margin: 10px 0;
            ">
                <h5 style="margin: 0 0 10px 0; color: #495057;">üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏</h5>
                <p style="margin: 5px 0; color: #495057; font-weight: bold;">
                    üõë –°—Ç–æ–ø-–ª–æ—Å—Å –∑–∞ –º–∏–Ω–∏–º—É–º–æ–º –æ—Ç–∫–∞—Ç–∞
                </p>
                <p style="margin: 5px 0; color: #495057; font-weight: bold;">
                    üí° –õ–æ–≥–∏–∫–∞: –û—Ç–∫–∞—Ç - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ
                </p>
                <p style="margin: 5px 0; color: #495057;">
                    ‚ö° –ü–∞—Çience - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É
                </p>
            </div>
            """, unsafe_allow_html=True)
