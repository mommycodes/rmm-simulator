import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List
from .markov_chain import CryptoMarkovChain
from .data_fetcher import CryptoDataFetcher
import plotly.graph_objects as go
import plotly.express as px

def render_markov_analysis():
    """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞"""
    
    st.markdown("## üß† –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    st.info("""
    **–¶–µ–ø—å –ú–∞—Ä–∫–æ–≤–∞** ‚Äî —ç—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    
    –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:
    - üìà **–¢—Ä–µ–Ω–¥—ã** (—Ä–æ—Å—Ç, –ø–∞–¥–µ–Ω–∏–µ, –±–æ–∫–æ–≤–∏–∫)
    - üìä **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å** (–Ω–∏–∑–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, –≤—ã—Å–æ–∫–∞—è) 
    - üéØ **RSI** (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
    - üì¶ **–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤** (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)
    """)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞
    render_automatic_analysis()

def render_automatic_analysis():
    """–†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å API –¥–∞–Ω–Ω—ã–º–∏"""
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        data_fetcher = CryptoDataFetcher()
        crypto_options = data_fetcher.get_available_symbols()
        
        selected_crypto = st.selectbox(
            "ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
            list(crypto_options.keys()),
            index=0
        )
        symbol = crypto_options[selected_crypto]
    
    with col2:
        # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        period_options = {
            '1 –º–µ—Å—è—Ü': '1mo',
            '3 –º–µ—Å—è—Ü–∞': '3mo', 
            '6 –º–µ—Å—è—Ü–µ–≤': '6mo',
            '1 –≥–æ–¥': '1y',
            '2 –≥–æ–¥–∞': '2y'
        }
        
        selected_period = st.selectbox(
            "üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö",
            list(period_options.keys()),
            index=2
        )
        period = period_options[selected_period]
    
    with col3:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        forecast_steps = st.number_input(
            "üîÆ –®–∞–≥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞",
            min_value=1,
            max_value=20,
            value=5,
            help="–ù–∞ —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"
        )
    
    # === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
    st.markdown("---")
    st.markdown("### üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª—å..."):
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
            markov_chain = CryptoMarkovChain()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = markov_chain.fetch_crypto_data(symbol, period)
            
            if data is not None and not data.empty:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state
                st.session_state.markov_data = data
                st.session_state.markov_chain = markov_chain
                st.session_state.symbol = symbol
                st.session_state.period = period
                
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("üìà –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"${data['Close'].iloc[0]:.2f}")
                with col2:
                    st.metric("üìä –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞", f"${data['Close'].iloc[-1]:.2f}")
                with col3:
                    price_change = ((data['Close'].iloc[-1] - data['Close'].iloc[0]) / data['Close'].iloc[0]) * 100
                    st.metric("üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ", f"{price_change:+.2f}%")
                with col4:
                    st.metric("üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{data['Close'].std():.2f}")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    # === –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
    if "markov_chain" in st.session_state and "markov_data" in st.session_state:
        markov_chain = st.session_state.markov_chain
        data = st.session_state.markov_data
        
        st.markdown("---")
        st.markdown("### üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with st.spinner("–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è..."):
            states = markov_chain.define_states(data)
            st.success(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(set(states.values()))} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        
        # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        with st.spinner("–°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤..."):
            transition_matrix = markov_chain.build_transition_matrix(data)
            st.success("‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞")
        
        # === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
        st.markdown("#### üìä –ß–∞—Å—Ç–æ—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        markov_chain.plot_state_frequency()
        
        # === –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ===
        st.markdown("#### üîÑ –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
        st.caption("""
        –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –¥—Ä—É–≥–æ–µ.
        –ß–µ–º —Ç–µ–º–Ω–µ–µ —Ü–≤–µ—Ç ‚Äî —Ç–µ–º –≤—ã—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞.
        """)
        markov_chain.plot_transition_heatmap()
        
        # === –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ ===
        st.markdown("#### üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        freq_data = markov_chain.analyze_state_frequency()
        st.dataframe(freq_data, use_container_width=True)
        
        # === –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ===
        st.markdown("---")
        st.markdown("### üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if st.session_state.get('markov_chain'):
            state_names = markov_chain.state_names
            
            if state_names:
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    selected_state = st.selectbox(
                        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
                        state_names,
                        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"
                    )
                
                with col2:
                    if st.button("üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", use_container_width=True):
                        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑..."):
                            predictions = markov_chain.predict_next_states(selected_state, forecast_steps)
                            st.session_state.predictions = predictions
                            st.session_state.selected_state = selected_state
                
                # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ===
                if "predictions" in st.session_state:
                    predictions = st.session_state.predictions
                    selected_state = st.session_state.selected_state
                    
                    st.markdown(f"#### üéØ –ü—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {selected_state}")
                    st.caption(f"–û–ø–∏—Å–∞–Ω–∏–µ: {markov_chain.get_state_description(selected_state)}")
                    
                    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                    forecast_data = []
                    for pred in predictions:
                        forecast_data.append({
                            '–®–∞–≥': pred['step'],
                            '–°–æ—Å—Ç–æ—è–Ω–∏–µ': pred['state'],
                            '–û–ø–∏—Å–∞–Ω–∏–µ': markov_chain.get_state_description(pred['state']),
                            '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{pred['probability']:.1%}",
                            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': 'üü¢ –í—ã—Å–æ–∫–∞—è' if pred['probability'] > 0.5 else 'üü° –°—Ä–µ–¥–Ω—è—è' if pred['probability'] > 0.3 else 'üî¥ –ù–∏–∑–∫–∞—è'
                        })
                    
                    forecast_df = pd.DataFrame(forecast_data)
                    st.dataframe(forecast_df, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    st.markdown("#### üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö")
                    markov_chain.plot_prediction_confidence(predictions)
                    
                    # === –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π ===
                    st.markdown("#### üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π")
                    
                    with st.expander("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞"):
                        for i, pred in enumerate(predictions):
                            st.markdown(f"**–®–∞–≥ {pred['step']}:**")
                            
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                            sorted_probs = sorted(
                                pred['all_probabilities'].items(), 
                                key=lambda x: x[1], 
                                reverse=True
                            )
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                            top_states = sorted_probs[:5]
                            
                            cols = st.columns(len(top_states))
                            for j, (state, prob) in enumerate(top_states):
                                with cols[j]:
                                    st.metric(
                                        f"#{j+1}",
                                        f"{prob:.1%}",
                                        help=markov_chain.get_state_description(state)
                                    )
                                    st.caption(state)
                            
                            if i < len(predictions) - 1:
                                st.markdown("---")
        
        # === –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===
        st.markdown("---")
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        st.markdown("""
        <div style="
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        ">
            <h2 style="color: white; margin: 0; font-size: 28px;">
                üí° –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </h2>
            <p style="color: #f0f0f0; margin: 10px 0 0 0; font-size: 16px;">
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ç–æ—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        if "predictions" in st.session_state:
            predictions = st.session_state.predictions
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            current_price = data['Close'].iloc[-1]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            trading_signals = markov_chain.generate_trading_signals(predictions, current_price)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            markov_chain.display_trading_signals(trading_signals)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            market_summary = markov_chain.get_market_summary(trading_signals)
            display_market_summary(market_summary)

def analyze_trading_signals(predictions, markov_chain):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    signals = []
    confidences = []
    
    for pred in predictions:
        state = pred['state']
        probability = pred['probability']
        
        # –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        parts = state.split('_')
        trend = parts[0] if len(parts) > 0 else 'T1'
        volatility = parts[1] if len(parts) > 1 else 'V1'
        rsi = parts[2] if len(parts) > 2 else 'R1'
        volume = parts[3] if len(parts) > 3 else 'O1'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        signal = "–ù–ï–ô–¢–†–ê–õ–¨–ù–û"
        
        if trend == 'T2' and rsi == 'R0':  # –†–æ—Å—Ç + –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            signal = "üü¢ –ü–û–ö–£–ü–ö–ê"
        elif trend == 'T0' and rsi == 'R2':  # –ü–∞–¥–µ–Ω–∏–µ + –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å  
            signal = "üî¥ –ü–†–û–î–ê–ñ–ê"
        elif trend == 'T2' and volume == 'O2':  # –†–æ—Å—Ç + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            signal = "üü¢ –ü–û–ö–£–ü–ö–ê"
        elif trend == 'T0' and volume == 'O2':  # –ü–∞–¥–µ–Ω–∏–µ + –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
            signal = "üî¥ –ü–†–û–î–ê–ñ–ê"
        
        signals.append(signal)
        confidences.append(probability)
    
    # –û–±—â–∏–π —Å–∏–≥–Ω–∞–ª
    buy_signals = sum(1 for s in signals if "–ü–û–ö–£–ü–ö–ê" in s)
    sell_signals = sum(1 for s in signals if "–ü–†–û–î–ê–ñ–ê" in s)
    
    if buy_signals > sell_signals:
        overall_signal = "üü¢ –ü–û–ö–£–ü–ö–ê"
    elif sell_signals > buy_signals:
        overall_signal = "üî¥ –ü–†–û–î–ê–ñ–ê"
    else:
        overall_signal = "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û"
    
    # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    avg_confidence = np.mean(confidences)
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç (—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é)
    high_confidence_steps = sum(1 for c in confidences if c > 0.5)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    details = []
    for i, (signal, conf) in enumerate(zip(signals, confidences)):
        step = i + 1
        if signal != "–ù–ï–ô–¢–†–ê–õ–¨–ù–û":
            details.append({
                'step': f"–®–∞–≥ {step}",
                'description': f"{signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.1%})"
            })
    
    return {
        'signal': overall_signal,
        'confidence': avg_confidence,
        'timeframe': high_confidence_steps,
        'details': details
    }

def display_market_summary(market_summary: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        padding: 20px;
        border-radius: 12px;
        margin: 20px 0;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    ">
        <h3 style="color: white; margin: 0; font-size: 24px; font-weight: bold;">
            üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        </h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        trend_emoji = "üü¢" if market_summary['overall_trend'] == 'BULLISH' else "üî¥" if market_summary['overall_trend'] == 'BEARISH' else "‚ö™"
        if market_summary['overall_trend'] == 'BULLISH':
            trend_bg = "linear-gradient(135deg, #065f46 0%, #10b981 100%)"
            trend_border = "#10b981"
        elif market_summary['overall_trend'] == 'BEARISH':
            trend_bg = "linear-gradient(135deg, #7f1d1d 0%, #ef4444 100%)"
            trend_border = "#ef4444"
        else:
            trend_bg = "linear-gradient(135deg, #374151 0%, #6b7280 100%)"
            trend_border = "#6b7280"
        
        st.markdown(f"""
        <div style="
            background: {trend_bg};
            border: 2px solid {trend_border};
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            margin: 5px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        ">
            <h4 style="margin: 0; font-size: 16px; color: #ffffff;">üìà –û–±—â–∏–π —Ç—Ä–µ–Ω–¥</h4>
            <p style="margin: 5px 0 0 0; font-size: 18px; font-weight: bold; color: #ffffff;">
                {trend_emoji} {market_summary['overall_trend']}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        if market_summary['trend_strength'] > 0.6:
            strength_bg = "linear-gradient(135deg, #065f46 0%, #10b981 100%)"
            strength_border = "#10b981"
        elif market_summary['trend_strength'] > 0.3:
            strength_bg = "linear-gradient(135deg, #92400e 0%, #f59e0b 100%)"
            strength_border = "#f59e0b"
        else:
            strength_bg = "linear-gradient(135deg, #7f1d1d 0%, #ef4444 100%)"
            strength_border = "#ef4444"
        
        st.markdown(f"""
        <div style="
            background: {strength_bg};
            border: 2px solid {strength_border};
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            margin: 5px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        ">
            <h4 style="margin: 0; font-size: 16px; color: #ffffff;">üí™ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞</h4>
            <p style="margin: 5px 0 0 0; font-size: 18px; font-weight: bold; color: #ffffff;">
                {market_summary['trend_strength']:.1%}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            border: 2px solid #3b82f6;
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            margin: 5px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        ">
            <h4 style="margin: 0; font-size: 16px; color: #ffffff;">üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤</h4>
            <p style="margin: 5px 0 0 0; font-size: 18px; font-weight: bold; color: #ffffff;">
                {market_summary['total_signals']}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        high_conf = market_summary['high_confidence']
        if high_conf > market_summary['total_signals'] * 0.5:
            conf_bg = "linear-gradient(135deg, #065f46 0%, #10b981 100%)"
            conf_border = "#10b981"
        elif high_conf > 0:
            conf_bg = "linear-gradient(135deg, #92400e 0%, #f59e0b 100%)"
            conf_border = "#f59e0b"
        else:
            conf_bg = "linear-gradient(135deg, #7f1d1d 0%, #ef4444 100%)"
            conf_border = "#ef4444"
        
        st.markdown(f"""
        <div style="
            background: {conf_bg};
            border: 2px solid {conf_border};
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            margin: 5px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        ">
            <h4 style="margin: 0; font-size: 16px; color: #ffffff;">üéØ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</h4>
            <p style="margin: 5px 0 0 0; font-size: 18px; font-weight: bold; color: #ffffff;">
                {high_conf}/{market_summary['total_signals']}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ç–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #1f2937 0%, #374151 100%);
        border: 2px solid #4b5563;
        padding: 20px;
        border-radius: 12px;
        margin: 20px 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    ">
        <h4 style="margin: 0 0 15px 0; color: #ffffff; text-align: center; font-size: 18px;">
            üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #111827 0%, #1f2937 100%);
            border: 2px solid #374151;
            border-radius: 10px;
            padding: 15px;
            margin: 5px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        ">
            <h5 style="margin: 0 0 10px 0; color: #ffffff; font-size: 16px;">üìä –°–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–ø–∞–º</h5>
            <p style="margin: 5px 0; color: #34d399; font-weight: bold; font-size: 14px;">
                üü¢ –ü–æ–∫—É–ø–∫–∏: {market_summary['buy_signals']}
            </p>
            <p style="margin: 5px 0; color: #f87171; font-weight: bold; font-size: 14px;">
                üî¥ –ü—Ä–æ–¥–∞–∂–∏: {market_summary['sell_signals']}
            </p>
            <p style="margin: 5px 0; color: #9ca3af; font-weight: bold; font-size: 14px;">
                ‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: {market_summary['neutral_signals']}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #111827 0%, #1f2937 100%);
            border: 2px solid #374151;
            border-radius: 10px;
            padding: 15px;
            margin: 5px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        ">
            <h5 style="margin: 0 0 10px 0; color: #ffffff; font-size: 16px;">üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤</h5>
            <p style="margin: 5px 0; color: #34d399; font-weight: bold; font-size: 14px;">
                üü¢ –í—ã—Å–æ–∫–∞—è: {market_summary['high_confidence']}
            </p>
            <p style="margin: 5px 0; color: #fbbf24; font-weight: bold; font-size: 14px;">
                üü° –°—Ä–µ–¥–Ω—è—è: {market_summary['medium_confidence']}
            </p>
            <p style="margin: 5px 0; color: #f87171; font-weight: bold; font-size: 14px;">
                üî¥ –ù–∏–∑–∫–∞—è: {market_summary['low_confidence']}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        if market_summary['overall_trend'] == 'BULLISH':
            rec_text = "üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –§–æ–∫—É—Å –Ω–∞ –ø–æ–∫—É–ø–∫–∞—Ö"
            rec_color = "#34d399"
            rec_icon = "‚úÖ"
        elif market_summary['overall_trend'] == 'BEARISH':
            rec_text = "üìâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂–∞—Ö"
            rec_color = "#f87171"
            rec_icon = "‚ö†Ô∏è"
        else:
            rec_text = "‚ö™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
            rec_color = "#9ca3af"
            rec_icon = "‚ÑπÔ∏è"
        
        quality_text = "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤: –•–æ—Ä–æ—à–µ–µ" if market_summary['high_confidence'] > market_summary['low_confidence'] else "‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤: –°–º–µ—à–∞–Ω–Ω–æ–µ"
        quality_color = "#34d399" if market_summary['high_confidence'] > market_summary['low_confidence'] else "#fbbf24"
        
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #111827 0%, #1f2937 100%);
            border: 2px solid #374151;
            border-radius: 10px;
            padding: 15px;
            margin: 5px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        ">
            <h5 style="margin: 0 0 10px 0; color: #ffffff; font-size: 16px;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h5>
            <p style="margin: 5px 0; color: {rec_color}; font-weight: bold; font-size: 14px;">
                {rec_icon} {rec_text}
            </p>
            <p style="margin: 5px 0; color: {quality_color}; font-weight: bold; font-size: 14px;">
                {quality_text}
            </p>
        </div>
        """, unsafe_allow_html=True)
