import json
import math
from typing import Dict, Tuple

import pandas as pd
import plotly.graph_objects as go
import streamlit as st

from .data_fetcher import CryptoDataFetcher
import numpy as np


def fetch_fear_greed_index() -> Tuple[str, str]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ —Å alternative.me (–±–µ—Å–ø–ª–∞—Ç–Ω–æ).

    Returns:
        value_text: —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (0-100)
        classification: —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (Extreme Fear ... Extreme Greed)
    """
    try:
        import requests
        resp = requests.get("https://api.alternative.me/fng/?limit=1").json()
        data = resp.get("data", [{}])[0]
        return data.get("value", "-"), data.get("value_classification", "-")
    except Exception:
        return "-", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"


def determine_trend(df: pd.DataFrame) -> Tuple[str, float]:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –ø–æ EMA50/EMA200 –∏ –∏—Ö –Ω–∞–∫–ª–æ–Ω—É."""
    price = df["Close"]
    ema50 = price.ewm(span=50).mean()
    ema200 = price.ewm(span=200).mean()

    slope50 = (ema50.iloc[-1] - ema50.iloc[-10]) / 10 if len(ema50) > 10 else 0.0
    slope200 = (ema200.iloc[-1] - ema200.iloc[-10]) / 10 if len(ema200) > 10 else 0.0

    bullish = price.iloc[-1] > ema200.iloc[-1] and ema50.iloc[-1] > ema200.iloc[-1] and slope50 > 0
    bearish = price.iloc[-1] < ema200.iloc[-1] and ema50.iloc[-1] < ema200.iloc[-1] and slope50 < 0

    if bullish:
        return "BULLISH", max(slope50, 0.0)
    if bearish:
        return "BEARISH", abs(min(slope50, 0.0))
    return "NEUTRAL", abs(slope50 - slope200)


def classify_market_state(df: pd.DataFrame) -> Dict[str, str]:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –ø–æ RSI/Volatility/ADX."""
    rsi = df.get("RSI")
    adx = df.get("ADX")
    vol = df.get("Volatility")

    rsi_state = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    if rsi is not None and not rsi.empty:
        last_rsi = float(rsi.iloc[-1])
        if last_rsi < 30:
            rsi_state = "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        elif last_rsi > 70:
            rsi_state = "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"

    trend_strength = "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    if adx is not None and not adx.empty:
        last_adx = float(adx.iloc[-1])
        if last_adx >= 25:
            trend_strength = "—Å–∏–ª—å–Ω—ã–π"
        elif last_adx <= 15:
            trend_strength = "—Å–ª–∞–±—ã–π"

    volatility_state = "—É–º–µ—Ä–µ–Ω–Ω–∞—è"
    if vol is not None and not vol.empty:
        last_vol = float(vol.iloc[-1])
        vol_ma = float(vol.rolling(50).mean().iloc[-1]) if len(vol) >= 50 else last_vol
        if last_vol > 1.5 * vol_ma:
            volatility_state = "–≤—ã—Å–æ–∫–∞—è"
        elif last_vol < 0.7 * vol_ma:
            volatility_state = "–Ω–∏–∑–∫–∞—è"

    return {
        "rsi": rsi_state,
        "trend_strength": trend_strength,
        "volatility": volatility_state,
    }


def plot_chart(df: pd.DataFrame, title: str) -> None:
    price = df["Close"]
    ema50 = price.ewm(span=50, adjust=False).mean()
    ema200 = price.ewm(span=200, adjust=False).mean()

    fig = go.Figure()
    fig.add_trace(go.Candlestick(
        x=df.index,
        open=df["Open"],
        high=df["High"],
        low=df["Low"],
        close=df["Close"],
        name="OHLC"
    ))
    fig.add_trace(go.Scatter(x=df.index, y=ema50, name="EMA 50", line=dict(color="#22c55e", width=1.5)))
    fig.add_trace(go.Scatter(x=df.index, y=ema200, name="EMA 200", line=dict(color="#3b82f6", width=1.5)))
    fig.update_layout(height=420, margin=dict(l=10, r=10, t=30, b=10), title=title)
    st.plotly_chart(fig, use_container_width=True)

def compute_trend_signal(df: pd.DataFrame) -> str:
    price = df['Close']
    ema50 = price.ewm(span=50, adjust=False).mean()
    ema200 = price.ewm(span=200, adjust=False).mean()
    if price.iloc[-1] > ema200.iloc[-1] and ema50.iloc[-1] > ema200.iloc[-1]:
        return 'BULL'
    if price.iloc[-1] < ema200.iloc[-1] and ema50.iloc[-1] < ema200.iloc[-1]:
        return 'BEAR'
    return 'NEUTRAL'


def render_coin_summary() -> None:
    st.markdown("## üß≠ –°–≤–æ–¥–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ")

    fetcher = CryptoDataFetcher()
    options = fetcher.get_available_symbols()

    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        selected_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É (USDT –ø–∞—Ä—ã)", list(options.keys()), index=0)
    with col2:
        period = st.selectbox("–ü–µ—Ä–∏–æ–¥", ["1mo", "3mo", "6mo", "1y", "2y"], index=2)
    with col3:
        timeframe = st.selectbox(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª",
            ["1h", "4h", "1d"],
            index=2,
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π"
        )
    st.caption("–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ü–µ—Ä–∏–æ–¥ ‚Äî —Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3mo = —Ç—Ä–∏ –º–µ—Å—è—Ü–∞ –¥–∞–Ω–Ω—ã—Ö). –ò–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1h = —á–∞—Å–æ–≤–∞—è —Å–≤–µ—á–∞).")

    symbol = options[selected_name]

    st.markdown("---")
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
        df = fetcher.fetch_data(symbol, period=period, interval=timeframe)

    if df is None or df.empty:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return

    trend, strength_val = determine_trend(df)
    market = classify_market_state(df)
    fear_val, fear_class = fetch_fear_greed_index()

    last_price = float(df["Close"].iloc[-1])
    price_str = f"${last_price:,.2f}" if last_price >= 1 else f"${last_price:.6f}"

    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", price_str)
    with col2:
        st.metric("–¢—Ä–µ–Ω–¥", trend)
    with col3:
        st.metric("–°–æ—Å—Ç–æ—è–Ω–∏–µ RSI", market["rsi"]) 
    with col4:
        st.metric("–°—Ç—Ä–∞—Ö/–ñ–∞–¥–Ω–æ—Å—Ç—å", f"{fear_val} ({fear_class})")

    # –î–æ–ø. —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    c1, c2, c3 = st.columns(3)
    with c1:
        st.success(f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {market['trend_strength']}")
    with c2:
        st.warning(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market['volatility']}")
    with c3:
        rsi_val = df['RSI'].iloc[-1] if 'RSI' in df.columns else None
        if rsi_val is not None:
            st.info(f"RSI(14): {rsi_val:.1f}")

    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏
    st.markdown("---")
    st.markdown("### üß† –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ ‚Äî —á—Ç–æ —ç—Ç–æ –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")

    if fear_val.isdigit():
        score = int(fear_val)
        st.progress(score / 100)
    else:
        score = None

    col1, col2 = st.columns([1, 2])
    with col1:
        st.write("""
        - 0‚Äì24: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö
        - 25‚Äì49: –°—Ç—Ä–∞—Ö
        - 50: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
        - 51‚Äì74: –ñ–∞–¥–Ω–æ—Å—Ç—å
        - 75‚Äì100: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å
        """)
    with col2:
        st.write("""
        –ò–Ω–¥–µ–∫—Å –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä—ã–Ω–∫–∞ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä—ë–º—ã,
        —Ç—Ä–µ–Ω–¥ –∏ —Å–æ—Ü.–º–µ—Ç—Ä–∏–∫–∏) –∏ —Å–≤–æ–¥–∏—Ç –∏—Ö –∫ —à–∫–∞–ª–µ 0‚Äì100.
        
        –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
        - –ü—Ä–∏ —Å—Ç—Ä–∞—Ö–µ —Ä—ã–Ω–æ–∫ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞—ë—Ç—Å—è ‚Üí –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ª–æ–Ω–≥–∏.
        - –ü—Ä–∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–æ–∫ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–≥—Ä–µ—Ç ‚Üí –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —à–æ—Ä—Ç—ã/—Ñ–∏–∫—Å–∞—Ü–∏—é.
        - –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å —Ç—Ä–µ–Ω–¥–æ–º (EMA200), RSI, —É—Ä–æ–≤–Ω—è–º–∏/–ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏.
        """)

    with st.expander("–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã"):
        bullet = []
        if score is not None:
            if score <= 25:
                bullet.append("–ù–∞ —Ä—ã–Ω–∫–µ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ö ‚Äî –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–æ–µ–≤ –≤–Ω–∏–∑ –∏ –æ—Ç—Å–∫–æ–∫–æ–≤.")
            elif score >= 75:
                bullet.append("–î–æ–º–∏–Ω–∏—Ä—É–µ—Ç –∂–∞–¥–Ω–æ—Å—Ç—å ‚Äî –≤—ã—Å–æ–∫ —Ä–∏—Å–∫ —Ä–µ–∑–∫–∏—Ö —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è–º–∏.")
            else:
                bullet.append("–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–ª–∏–∑–æ–∫ –∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É ‚Äî —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–µ–Ω—å—à–µ, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–¥.")
        bullet.append(f"–¢—Ä–µ–Ω–¥ –ø–æ EMA: {trend}. –°–∏–ª–∞: {market['trend_strength']}.")
        bullet.append(f"RSI: {market['rsi']}. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market['volatility']}.")
        st.write("\n".join([f"- {b}" for b in bullet]))

    st.markdown("---")
    plot_chart(df, title=f"{selected_name} / USDT")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    st.markdown("### üß∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    tool_tabs = st.tabs(["EMA/MA", "RSI", "–ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä", "ATR", "–ö–∞—Ä—Ç–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–æ—Ü–µ–Ω–∫–∞)"])
    

    with tool_tabs[0]:
        ema20 = df['Close'].ewm(span=20, adjust=False).mean()
        ema50 = df['Close'].ewm(span=50, adjust=False).mean()
        ema200 = df['Close'].ewm(span=200, adjust=False).mean()
        st.line_chart(pd.DataFrame({"Close": df['Close'], "EMA20": ema20, "EMA50": ema50, "EMA200": ema200}))
        st.caption("EMA20/50/200 ‚Äî –æ—Ü–µ–Ω–∫–∞ –∫—Ä–∞—Ç–∫–æ/—Å—Ä–µ–¥–Ω–µ/–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞")
        with st.expander("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"):
            st.markdown("""
            - EMA20 –≤—ã—à–µ EMA50/200 ‚áí –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö.
            - EMA50 –Ω–∞–¥ EMA200 ‚áí —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥; –Ω–∏–∂–µ ‚áí –º–µ–¥–≤–µ–∂–∏–π.
            - –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA50/EMA200 ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä —Å–º–µ–Ω—ã —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞.
            """)

    with tool_tabs[1]:
        st.line_chart(pd.DataFrame({"RSI(14)": df['RSI']}))
        st.caption("RSI(14): <30 ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, >70 ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
        with st.expander("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"):
            st.markdown("""
            - –ù–∞ —Ç—Ä–µ–Ω–¥–µ RSI –¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∫—Ä–∞–π–Ω–∏—Ö –∑–æ–Ω–∞—Ö ‚Äî –Ω–µ –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥—É–π—Ç–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.
            - –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ RSI —É —É—Ä–æ–≤–Ω–µ–π —É—Å–∏–ª–∏–≤–∞—é—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.
            - –° EMA200 —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ö–æ–¥–æ–≤.
            """)

    with tool_tabs[2]:
        bb_mid = df['Close'].rolling(20).mean()
        bb_std = df['Close'].rolling(20).std()
        bb_up = bb_mid + 2 * bb_std
        bb_lo = bb_mid - 2 * bb_std
        st.line_chart(pd.DataFrame({"Middle": bb_mid, "Upper": bb_up, "Lower": bb_lo}))
        st.caption("–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (20, 2œÉ) ‚Äî –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∫—Ä–∞–π–Ω–∏–µ –∑–æ–Ω—ã")
        with st.expander("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"):
            st.markdown("""
            - –ö–∞—Å–∞–Ω–∏–µ Upper/Lower –Ω–∞ —Ñ–ª–µ—Ç–µ —á–∞—Å—Ç–æ –≤–µ–¥—ë—Ç –∫ –≤–æ–∑–≤—Ä–∞—Ç—É –∫ Middle.
            - –°—É–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å ‚áí —Å–∂–∞—Ç–∏–µ; –ø—Ä–æ–±–æ–π –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞—á–∞–ª–∞ –∏–º–ø—É–ª—å—Å–∞.
            - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–ª–æ—Å ‚áí —Ä–æ—Å—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
            """)

    with tool_tabs[3]:
        st.line_chart(pd.DataFrame({"ATR(14)": df['ATR']}))
        st.caption("ATR(14) ‚Äî —Å—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –º–µ—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        with st.expander("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"):
            st.markdown("""
            - –°—Ç–∞–≤—å—Ç–µ —Å—Ç–æ–ø—ã –∫—Ä–∞—Ç–Ω–æ ATR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1‚Äì2√óATR) ‚Äî –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
            - –†–æ—Å—Ç ATR ‚Äî –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å, —Å–Ω–∏–∂–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.
            - –ü–∞–¥–µ–Ω–∏–µ ATR ‚Äî —Ä—ã–Ω–æ–∫ —Å–∂–∏–º–∞–µ—Ç—Å—è, –∂–¥–∏—Ç–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
            """)

    with tool_tabs[4]:
        st.caption("–ú–∏–Ω–∏‚Äë—Ç–µ–ø–ª–æ–∫–∞—Ä—Ç–∞: —Ç—Ä–µ–Ω–¥ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º (EMA50/EMA200)")
        intervals = ["1h", "4h", "1d"]
        heat = {}
        fetcher = CryptoDataFetcher()
        for iv in intervals:
            data_iv = fetcher.fetch_data(symbol, period=period, interval=iv)
            if data_iv is not None and not data_iv.empty:
                heat[iv] = compute_trend_signal(data_iv)
            else:
                heat[iv] = 'N/A'

        cols = st.columns(len(intervals))
        for i, iv in enumerate(intervals):
            val = heat[iv]
            if val == 'BULL':
                cols[i].success(f"{iv}: BULL")
            elif val == 'BEAR':
                cols[i].error(f"{iv}: BEAR")
            elif val == 'NEUTRAL':
                cols[i].warning(f"{iv}: NEUTRAL")
            else:
                cols[i].info(f"{iv}: N/A")

    # –ö–∞—Ä—Ç–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–æ—Ü–µ–Ω–∫–∞)
    with tool_tabs[4]:
        st.caption("–û—Ü–µ–Ω–∫–∞ —Å–∫–æ–ø–ª–µ–Ω–∏–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞–º –∏ –∏–º–ø—É–ª—å—Å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –Ω–µ Coinglass, –Ω–æ –ø–æ–ª–µ–∑–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è.")
        window = st.slider("–û–∫–Ω–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤, –±–∞—Ä–æ–≤", 5, 100, 20)
        close = df['Close']
        high = df['High']
        low = df['Low']

        # –ù–∞–π–¥–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã/–º–∏–Ω–∏–º—É–º—ã
        def rolling_extrema(series: pd.Series, w: int) -> pd.Series:
            return series[(series.shift(1) < series) & (series.shift(-1) < series)]

        swing_highs = (high == high.rolling(window, center=True).max())
        swing_lows = (low == low.rolling(window, center=True).min())

        levels = []
        for idx in df.index:
            if swing_highs.loc[idx]:
                levels.append((idx, float(high.loc[idx]), 'H'))
            if swing_lows.loc[idx]:
                levels.append((idx, float(low.loc[idx]), 'L'))

        # –°—Ç—Ä–æ–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã +-ATR –æ—Ç —É—Ä–æ–≤–Ω–µ–π
        atr = df['ATR']
        if not atr.isna().all():
            last_atr = float(atr.iloc[-1])
        else:
            last_atr = float(close.diff().abs().rolling(14).mean().iloc[-1])

        if levels:
            fig = go.Figure()
            fig.add_trace(go.Candlestick(x=df.index, open=df['Open'], high=high, low=low, close=close, name='OHLC'))
            for _, lvl, typ in levels[-50:]:
                color = '#ef4444' if typ == 'H' else '#22c55e'
                fig.add_hrect(y0=lvl - 0.5 * last_atr, y1=lvl + 0.5 * last_atr, line_width=0, fillcolor=color, opacity=0.15)
            fig.update_layout(height=420, margin=dict(l=10, r=10, t=10, b=10))
            st.plotly_chart(fig, use_container_width=True)
            with st.expander("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"):
                st.markdown("""
                - –ö—Ä–∞—Å–Ω—ã–µ –∑–æ–Ω—ã (H) ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å—Ç–æ–ø–æ–≤ –Ω–∞–¥ —Å–≤–∏–Ω–≥‚Äë—Ö–∞—è–º–∏; –∑–µ–ª—ë–Ω—ã–µ (L) ‚Äî –ø–æ–¥ —Å–≤–∏–Ω–≥‚Äë–ª–æ—è–º–∏.
                - –®–∏—Ä–∏–Ω–∞ ~0.5√óATR ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä –≥–ª—É–±–∏–Ω—ã –≤—ã–Ω–æ—Å–∞; –ø–æ–¥–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –¢–§.
                - –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∂–¥–∞—Ç—å –∑–∞—Ö–æ–¥–∞ –≤ –∑–æ–Ω—É + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—Å–≤–µ—á–∞/–æ–±—ä—ë–º) –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç.
                """)
        else:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω–µ–π. –£–≤–µ–ª–∏—á—å—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –æ–∫–Ω–æ.")


