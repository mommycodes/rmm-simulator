import streamlit as st
import pandas as pd


def render_pattern_analyzer() -> None:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π –∏ —Ñ–∏–≥—É—Ä.

    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞/–≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö + –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ + —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """

    st.markdown("## üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")

    mode = st.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
        ["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"],
        horizontal=True,
    )

    df: pd.DataFrame | None = None

    if mode == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV":
        uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ (OHLC)", type=["csv"])
        if uploaded is not None:
            try:
                df = pd.read_csv(uploaded)
            except Exception as exc:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {exc}")
    else:
        st.caption("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (Date, Open, High, Low, Close)")
        sample = "Date,Open,High,Low,Close\n2024-01-01,100,110,95,108\n2024-01-02,108,112,101,105"
        text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ CSV", sample, height=140)
        try:
            df = pd.read_csv(pd.io.common.StringIO(text))
        except Exception:
            df = None

    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    with col1:
        detect_candles = st.checkbox("–°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", value=True)
    with col2:
        detect_patterns = st.checkbox("–§–∏–≥—É—Ä—ã –¢–ê (–ø—Ä–æ–±–æ–∏, –∫–ª–∏–Ω –∏ —Ç.–¥.)", value=False)
    with col3:
        min_bars = st.number_input("–ú–∏–Ω. –¥–ª–∏–Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞", min_value=1, max_value=200, value=3)

    if st.button("üîé –ù–∞–π—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", use_container_width=True):
        if df is None or df.empty:
            st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º")
            return

        required_cols = {"Open", "High", "Low", "Close"}
        if not required_cols.issubset(set(df.columns)):
            st.error("–í –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã: Open, High, Low, Close")
            return

        results: list[dict] = []

        if detect_candles:
            # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Å—Ç—ã—Ö —Å–≤–µ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            for idx in range(1, len(df)):
                o, h, l, c = df.loc[idx, ["Open", "High", "Low", "Close"]]
                prev_c = df.loc[idx - 1, "Close"]

                is_bullish_engulfing = (c > o) and (c >= prev_c) and (o <= df.loc[idx - 1, "Open"]) and (c - o > (o - c if o > c else 0))
                is_bearish_engulfing = (c < o) and (c <= prev_c) and (o >= df.loc[idx - 1, "Open"]) and (o - c > (c - o if c > o else 0))

                if is_bullish_engulfing:
                    results.append({
                        "–ò–Ω–¥–µ–∫—Å": idx,
                        "–¢–∏–ø": "–°–≤–µ—á–Ω–æ–π",
                        "–ü–∞—Ç—Ç–µ—Ä–Ω": "Bullish Engulfing",
                    })
                if is_bearish_engulfing:
                    results.append({
                        "–ò–Ω–¥–µ–∫—Å": idx,
                        "–¢–∏–ø": "–°–≤–µ—á–Ω–æ–π",
                        "–ü–∞—Ç—Ç–µ—Ä–Ω": "Bearish Engulfing",
                    })

        if detect_patterns:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–∏–≥—É—Ä –¢–ê: –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–æ–∏ High/Low –Ω–∞ –æ–∫–Ω–µ min_bars
            for idx in range(min_bars, len(df)):
                window = df.iloc[idx - min_bars:idx]
                if df.loc[idx, "Close"] > window["High"].max():
                    results.append({"–ò–Ω–¥–µ–∫—Å": idx, "–¢–∏–ø": "–§–∏–≥—É—Ä–∞", "–ü–∞—Ç—Ç–µ—Ä–Ω": "–ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö"})
                if df.loc[idx, "Close"] < window["Low"].min():
                    results.append({"–ò–Ω–¥–µ–∫—Å": idx, "–¢–∏–ø": "–§–∏–≥—É—Ä–∞", "–ü–∞—Ç—Ç–µ—Ä–Ω": "–ü—Ä–æ–±–æ–π –≤–Ω–∏–∑"})

        if results:
            st.success(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(results)}")
            st.dataframe(pd.DataFrame(results), use_container_width=True)
        else:
            st.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º")


