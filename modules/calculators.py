import streamlit as st
import numpy as np
import pandas as pd

# =========================
# –†–∞–∑–¥–µ–ª: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ö–æ–¥–∞
# =========================
def render_rmm_calculators():
    st.markdown("## üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ö–æ–¥–∞")

    # ---- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 1
    calc_deposit = st.number_input("üíº –î–µ–ø–æ–∑–∏—Ç ($)", value=1000.0, key="calc_dep")
    calc_risk_pct = st.number_input("üìâ –†–∏—Å–∫ –Ω–∞ –¥–µ–Ω—å (%)", value=2.0, key="calc_risk")
    calc_num_trades = st.number_input("üî¢ –°–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å", value=3, key="calc_trades")
    calc_stop_pct = st.number_input("üõë –°—Ç–æ–ø (%)", value=1.0, key="calc_stop")

    risk_per_trade = (calc_deposit * calc_risk_pct / 100) / calc_num_trades if calc_num_trades else 0
    position_size = risk_per_trade / (calc_stop_pct / 100) if calc_stop_pct else 0

    st.markdown(f"**‚ö†Ô∏è –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É:** ${risk_per_trade:.2f}")
    st.markdown(f"**üéØ –û–±—ä—ë–º –≤—Ö–æ–¥–∞:** ${position_size:.2f}")
        

    # ---- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 2 
    st.markdown("---")
    st.markdown("## üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–∞ –ø–æ SL (%)")

    # 1) –í–≤–æ–¥: –¥–µ–ø–æ–∑–∏—Ç ($) –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)
    dep_sl = st.number_input("üíº –î–µ–ø–æ–∑–∏—Ç ($)", value=1000.0, min_value=0.0, key="slcalc_dep")
    risk_pct_input = st.number_input(
        "üî• –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)",
        value=2.0, min_value=0.01, max_value=100.0, step=0.01, key="slcalc_risk_pct"
    )

    if dep_sl <= 0:
        st.warning("–£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç.")
    else:
        # 2) –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –≤ $ (–ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ % –≤ –¥–æ–ª–ª–∞—Ä—ã)
        risk_dollar_direct = round(dep_sl * risk_pct_input / 100.0, 2)

        # 3) –ú–∞–∫—Å. –¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ—Ç–µ—Ä—è –¥–ª—è —Å—Ç–æ–ø-—Ç–æ—Ä–≥–æ–≤ –≤ %
        max_loss_pct_stop = round(risk_pct_input / 4.0, 2)

        # 4) –ü–æ—Ç–µ—Ä—è –≤ $ –ø—Ä–∏ —Å—Ç–æ–ø-—Ç–æ—Ä–≥–∞—Ö
        max_loss_dollar_stop = round(dep_sl * (max_loss_pct_stop / 100.0), 2)

        # 5) –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É ($) –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        risk_per_trade_dollar_for_table = round(max_loss_dollar_stop, 2)

        # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        c1, c2, c3, c4 = st.columns(4)
        c1.metric("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)", f"{risk_pct_input:.2f}%")
        c2.metric("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É ($)", f"{risk_dollar_direct:.2f}$")
        c3.metric("–ú–∞–∫—Å. –ø–æ—Ç–µ—Ä—è STOP-—Ç–æ—Ä–≥–∏ (%)", f"{max_loss_pct_stop:.2f}%")
        c4.metric("–ú–∞–∫—Å. –ø–æ—Ç–µ—Ä—è STOP-—Ç–æ—Ä–≥–∏ ($)", f"{max_loss_dollar_stop:.2f}$")

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ SL
        sl_min = 0.10
        sl_max = 10.0
        sl_step = 0.10

        sl_values = np.round(np.arange(sl_min, sl_max + 1e-9, sl_step), 2)

        # –°—É–º–º–∞ –≤—Ö–æ–¥–∞ ($)
        entry_sizes_raw = risk_per_trade_dollar_for_table * 100.0 / sl_values
        entry_cap = 2.0 * dep_sl
        entry_sizes_capped = np.minimum(entry_sizes_raw, entry_cap)

        # –¢–∞–±–ª–∏—Ü–∞
        df_sl = pd.DataFrame({
            "SL (%)": sl_values,
            "–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É ($)": np.repeat(risk_per_trade_dollar_for_table, len(sl_values)),
            "–°—É–º–º–∞ –≤—Ö–æ–¥–∞ ($)": np.round(entry_sizes_capped, 2),
        })

        st.dataframe(df_sl, use_container_width=True)
