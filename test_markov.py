#!/usr/bin/env python3
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.markov_chain import CryptoMarkovChain
from modules.data_fetcher import CryptoDataFetcher
import pandas as pd
import numpy as np

def test_markov_system():
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    print("=" * 60)
    
    data_fetcher = CryptoDataFetcher()
    markov_chain = CryptoMarkovChain()
    
    print("1. üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    data = data_fetcher.fetch_data('BTC-USD', '1y')
    
    if data is not None:
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üìà –¶–µ–Ω–∞: ${data['Close'].iloc[0]:.2f} ‚Üí ${data['Close'].iloc[-1]:.2f}")
        
        print("\n2. üîÑ –û–±—É—á–µ–Ω–∏–µ —Ü–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞...")
        
        markov_chain.train(data)
        
        print("   ‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–π: {len(markov_chain.states)}")
        print(f"   üîó –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(markov_chain.transitions)}")
        
        print("\n3. üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
        
        predictions = markov_chain.predict(10)
        
        print("   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("   üìà –°–ª–µ–¥—É—é—â–∏–µ 10 –¥–Ω–µ–π:")
        
        for i, pred in enumerate(predictions, 1):
            print(f"      –î–µ–Ω—å {i}: {pred}")
        
        print("\n4. üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏...")
        
        accuracy = markov_chain.evaluate_accuracy(data)
        
        print(f"   ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%}")
        
        print("\n5. üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        
        recommendations = markov_chain.get_recommendations()
        
        print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
        print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        for rec in recommendations:
            print(f"      ‚Ä¢ {rec}")
        
        print("\n6. üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        try:
            markov_chain.plot_transitions()
            print("   ‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        print("\n7. üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        
        try:
            markov_chain.save_model('markov_model.pkl')
            print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        print("\n8. üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        
        try:
            new_markov = CryptoMarkovChain()
            new_markov.load_model('markov_model.pkl')
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            new_predictions = new_markov.predict(5)
            print("   üìà –ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:")
            for i, pred in enumerate(new_predictions, 1):
                print(f"      –î–µ–Ω—å {i}: {pred}")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        print("\n" + "=" * 60)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

def test_advanced_features():
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 60)
    
    data_fetcher = CryptoDataFetcher()
    markov_chain = CryptoMarkovChain()
    
    print("1. üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
    
    symbols = ['BTC-USD', 'ETH-USD', 'ADA-USD']
    
    for symbol in symbols:
        data = data_fetcher.fetch_data(symbol, '6mo')
        if data is not None:
            print(f"   ‚úÖ {symbol}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            markov_chain.train(data)
            predictions = markov_chain.predict(5)
            
            print(f"   üìà {symbol} –ø—Ä–æ–≥–Ω–æ–∑—ã:")
            for i, pred in enumerate(predictions, 1):
                print(f"      –î–µ–Ω—å {i}: {pred}")
        else:
            print(f"   ‚ùå {symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")
    
    print("\n2. üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤...")
    
    periods = ['1mo', '3mo', '6mo', '1y']
    
    for period in periods:
        data = data_fetcher.fetch_data('BTC-USD', period)
        if data is not None:
            markov_chain.train(data)
            accuracy = markov_chain.evaluate_accuracy(data)
            print(f"   üìä {period}: —Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.2%}")
        else:
            print(f"   ‚ùå {period}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")
    
    print("\n3. üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    
    data = data_fetcher.fetch_data('BTC-USD', '1y')
    if data is not None:
        markov_chain.train(data)
        recommendations = markov_chain.get_recommendations()
        
        print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in recommendations:
            print(f"      ‚Ä¢ {rec}")
    
    print("\n" + "=" * 60)
    print("üéâ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    try:
        test_markov_system()
        test_advanced_features()
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()