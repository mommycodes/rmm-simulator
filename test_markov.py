#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.markov_chain import CryptoMarkovChain
from modules.data_fetcher import CryptoDataFetcher
import pandas as pd
import numpy as np

def test_markov_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–ø–µ–π –ú–∞—Ä–∫–æ–≤–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    data_fetcher = CryptoDataFetcher()
    markov_chain = CryptoMarkovChain()
    
    print("1. üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    data = data_fetcher.fetch_data('BTC-USD', '1y')
    
    if data is not None:
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üìà –¶–µ–Ω–∞: ${data['Close'].iloc[0]:.2f} ‚Üí ${data['Close'].iloc[-1]:.2f}")
        
        print("\n2. üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        states = markov_chain.define_states(data)
        unique_states = list(set(states.values()))
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_states)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
        for i, state in enumerate(unique_states[:5]):
            description = markov_chain.get_state_description(state)
            print(f"      {i+1}. {state}: {description}")
        
        print("\n3. üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤...")
        
        # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        transition_matrix = markov_chain.build_transition_matrix(data)
        
        print(f"   ‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ ({transition_matrix.shape[0]}x{transition_matrix.shape[1]})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        non_zero_transitions = np.count_nonzero(transition_matrix)
        total_transitions = transition_matrix.size
        print(f"   üìä –ù–µ–Ω—É–ª–µ–≤—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {non_zero_transitions}/{total_transitions} ({non_zero_transitions/total_transitions:.1%})")
        
        print("\n4. üîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        if unique_states:
            test_state = unique_states[0]
            print(f"   üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {test_state}")
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {markov_chain.get_state_description(test_state)}")
            
            try:
                predictions = markov_chain.predict_next_states(test_state, 5)
                
                print(f"   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                for pred in predictions:
                    print(f"      –®–∞–≥ {pred['step']}: {pred['state']} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {pred['probability']:.1%})")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        
        print("\n5. üìä –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        freq_data = markov_chain.analyze_state_frequency()
        if not freq_data.empty:
            print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"   üèÜ –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {freq_data.iloc[0]['–°–æ—Å—Ç–æ—è–Ω–∏–µ']} ({freq_data.iloc[0]['–ß–∞—Å—Ç–æ—Ç–∞ (%)']:.1f}%)")
            print(f"   üìâ –ù–∞–∏–º–µ–Ω–µ–µ —á–∞—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {freq_data.iloc[-1]['–°–æ—Å—Ç–æ—è–Ω–∏–µ']} ({freq_data.iloc[-1]['–ß–∞—Å—Ç–æ—Ç–∞ (%)']:.1f}%)")
        
        print("\n6. üí° –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if unique_states:
            test_state = unique_states[0]
            predictions = markov_chain.predict_next_states(test_state, 3)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
            signals = []
            for pred in predictions:
                state = pred['state']
                parts = state.split('_')
                if len(parts) >= 4:
                    trend = parts[0]
                    rsi = parts[2]
                    
                    if trend == 'T2' and rsi == 'R0':  # –†–æ—Å—Ç + –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                        signals.append("üü¢ –ü–û–ö–£–ü–ö–ê")
                    elif trend == 'T0' and rsi == 'R2':  # –ü–∞–¥–µ–Ω–∏–µ + –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                        signals.append("üî¥ –ü–†–û–î–ê–ñ–ê")
                    else:
                        signals.append("‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û")
            
            print(f"   üìà –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {test_state}:")
            for i, signal in enumerate(signals):
                print(f"      –®–∞–≥ {i+1}: {signal}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   streamlit run app.py")
        print("   –ò –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üß† –¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞'")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

if __name__ == "__main__":
    test_markov_system()
