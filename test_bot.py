#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram-–±–æ—Ç–∞
"""
import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, MenuButton, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
WEB_APP_URL = os.getenv('WEB_APP_URL')

# –ê–¥–º–∏–Ω (—Ç–æ–ª—å–∫–æ –≤—ã)
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
ADMIN_USER_ID = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = 'authorized_users.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_authorized_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def save_authorized_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False

def is_user_authorized(user_id, username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if username == ADMIN_USERNAME:
        return True
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_authorized_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏ username
    for user in users:
        if user.get('id') == user_id or user.get('username') == username:
            return True
    
    return False

def is_admin(user_id, username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return username == ADMIN_USERNAME

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not is_user_authorized(user_id, username):
        await update.message.reply_text(
            "üö´ **–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç**\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n"
            "üì¨ –ö–æ–Ω—Ç–∞–∫—Ç: @mommycodes",
            parse_mode='Markdown'
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=calculators"))],
        [InlineKeyboardButton("üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=ta"))],
        [InlineKeyboardButton("üåä –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=waves"))],
        [InlineKeyboardButton("üé≤ –°–∏–º—É–ª—è—Ç–æ—Ä", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=simulator"))],
        [InlineKeyboardButton("üß† –¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=markov"))],
        [InlineKeyboardButton("üß≠ –°–≤–æ–¥–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=coin_summary"))],
        [InlineKeyboardButton("üìã –ß–µ–∫-–ª–∏—Å—Ç", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=checklist"))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RMM Trading Tools!**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**

üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã** - —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∏ –æ–±—ä–µ–º–æ–≤ –ø–æ–∑–∏—Ü–∏–π
üìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É
üåä **–í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑** - —Ç–µ–æ—Ä–∏—è –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞
üé≤ **–°–∏–º—É–ª—è—Ç–æ—Ä** - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
üß† **–¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞** - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
üß≠ **–°–≤–æ–¥–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ** - –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
üìã **–ß–µ–∫-–ª–∏—Å—Ç** - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–¥–µ–ª–∫–µ

**üåê –ü–æ–ª–Ω—ã–π —Å–∞–π—Ç:** https://mommycodes.streamlit.app

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç!
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def calculators(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞–º"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not is_user_authorized(user_id, username):
        await update.message.reply_text(
            "üö´ **–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç**\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n"
            "üì¨ –ö–æ–Ω—Ç–∞–∫—Ç: @mommycodes",
            parse_mode='Markdown'
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("üßÆ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=calculators"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã RMM**\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not is_admin(user_id, username):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    help_text = """
üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**

`/add_user @username` - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`/remove_user @username` - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
`/list_users` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
`/admin_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
`/add_user @john_doe`
`/remove_user @jane_smith`
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not is_admin(user_id, username):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–ü—Ä–∏–º–µ—Ä: `/add_user @john_doe`")
        return
    
    target_username = context.args[0].replace('@', '')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    users = load_authorized_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    for user in users:
        if user.get('username') == target_username:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!")
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = {
        'username': target_username,
        'added_by': username,
        'added_date': str(update.message.date)
    }
    users.append(new_user)
    
    if save_authorized_users(users):
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not is_admin(user_id, username):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–ü—Ä–∏–º–µ—Ä: `/remove_user @john_doe`")
        return
    
    target_username = context.args[0].replace('@', '')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    users = load_authorized_users()
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    original_count = len(users)
    users = [user for user in users if user.get('username') != target_username]
    
    if len(users) < original_count:
        if save_authorized_users(users):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not is_admin(user_id, username):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    users = load_authorized_users()
    
    if not users:
        await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text = "üìù **–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    for i, user in enumerate(users, 1):
        text += f"{i}. @{user.get('username', 'N/A')}\n"
        text += f"   –î–æ–±–∞–≤–ª–µ–Ω: {user.get('added_by', 'N/A')}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def setup_menu_button(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Å Web App
        menu_button = MenuButtonWebApp(
            text="üöÄ RMM Tools",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await application.bot.set_chat_menu_button(menu_button=menu_button)
        logger.info("–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª: TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("calculators", calculators))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_help", admin_help))
    application.add_handler(CommandHandler("add_user", add_user))
    application.add_handler(CommandHandler("remove_user", remove_user))
    application.add_handler(CommandHandler("list_users", list_users))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    application.post_init = setup_menu_button
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   /admin_help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º")
    print("   /add_user @username - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   /remove_user @username - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   /list_users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
